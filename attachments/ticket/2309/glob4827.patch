diff -ur mc-4.8.27.prev/lib/search/glob.c mc-4.8.27/lib/search/glob.c
--- mc-4.8.27.prev/lib/search/glob.c	2021-08-01 19:45:58.000000000 +0300
+++ mc-4.8.27/lib/search/glob.c	2025-02-27 00:26:16.805761608 +0200
@@ -2,12 +2,15 @@
    Search text engine.
    Glob-style pattern matching
 
-   Copyright (C) 2009-2021
+   Copyright (C) 2009-2025
    Free Software Foundation, Inc.
 
    Written by:
    Slava Zanko <slavazanko@gmail.com>, 2009.
 
+   Rewritten by:
+   Dmitry Groshev <wjaguar@users.sourceforge.net>, 2025.
+
    This file is part of the Midnight Commander.
 
    The Midnight Commander is free software: you can redistribute it
@@ -43,117 +46,440 @@
 
 /*** file scope functions ************************************************************************/
 
-static GString *
-mc_search__glob_translate_to_regex (const GString * astr)
+#define SANE_SEQ_MAX (1024 * 1024)
+
+static int do_sequence(char *mask, char *dest, int cnt, int depth)
 {
-    const char *str = astr->str;
-    GString *buff;
-    gsize loop;
-    gboolean inside_group = FALSE;
-
-    buff = g_string_sized_new (32);
-
-    for (loop = 0; loop < astr->len; loop++)
-    {
-        switch (str[loop])
-        {
-        case '*':
-            if (!strutils_is_char_escaped (str, &(str[loop])))
-            {
-                g_string_append (buff, inside_group ? ".*" : "(.*)");
-                continue;
-            }
-            break;
-        case '?':
-            if (!strutils_is_char_escaped (str, &(str[loop])))
-            {
-                g_string_append (buff, inside_group ? "." : "(.)");
-                continue;
-            }
-            break;
-        case ',':
-            if (!strutils_is_char_escaped (str, &(str[loop])))
-            {
-                g_string_append_c (buff, inside_group ? '|' : ',');
-                continue;
-            }
-            break;
-        case '{':
-            if (!strutils_is_char_escaped (str, &(str[loop])))
-            {
-                g_string_append_c (buff, '(');
-                inside_group = TRUE;
-                continue;
-            }
-            break;
-        case '}':
-            if (!strutils_is_char_escaped (str, &(str[loop])))
-            {
-                g_string_append_c (buff, ')');
-                inside_group = FALSE;
-                continue;
-            }
-            break;
-        case '+':
-        case '.':
-        case '$':
-        case '(':
-        case ')':
-        case '^':
-            g_string_append_c (buff, '\\');
-            break;
-        default:
-            break;
-        }
-        g_string_append_c (buff, str[loop]);
-    }
-    return buff;
+	int i, n, from, to, step, next, l1, l2, zx, span;
+	char cfrom, cto, *m2;
+
+	n = sscanf(mask, "%d..%d%n..%d%n", &from, &to, &next, &step, &next);
+	if ((n >= 2) && (mask[next] == '}')) // Numeric sequence
+	{
+		l1 = strchr(mask, '.') - mask;
+		m2 = mask + l1 + 2;
+		l2 = strcspn(m2, ".}");
+		if ((n < 3) || !step) step = 1;
+		span = to - from;
+		if ((span >= 0) ^ (step > 0)) step = -step; // Proper sign
+		/* Zero extension flag */
+		zx = (mask[*mask == '-'] == '0') || (m2[*m2 == '-'] == '0');
+		n = span / step + 1;
+		if (n > SANE_SEQ_MAX) return 0; // Do not go to insane lengths
+		if (l2 > l1) l1 = l2; // Max
+		/* When measuring, return upper bound */
+		if (!dest) return ((depth ? 3 : 1) + n * (l1 + 1) - 1 + 1);
+		/* Generating */
+		l2 = cnt; // For measuring
+		if (!depth) dest[cnt++] = '('; // Capturing group
+		else // Non-capturing group
+		{
+			strcpy(dest + cnt, "(?:");
+			cnt += 3;
+		}
+		for (i = 0; i < n; i++ , from += step)
+			cnt += g_snprintf(dest + cnt, l1 + 2,
+				zx ? "%0*d|" : "%d|", zx ? l1 : from, from);
+		dest[cnt - 1] = ')';
+		/* Return precise length */
+		return (cnt - l2);
+	}
+	n = sscanf(mask, "%c..%c%n..%d%n", &cfrom, &cto, &next, &step, &next);
+	if ((n >= 2) && (mask[next] == '}') &&
+		g_ascii_isalpha(cfrom) && g_ascii_isalpha(cto)) // Char sequence
+	{
+		if ((n < 3) || !step) step = 1;
+		span = cto - cfrom;
+		if ((span >= 0) ^ (step > 0)) step = -step; // Proper sign
+		n = span / step + 1;
+		/* Measuring */
+		if (!dest) return (!depth + 1 + n + 1 + !depth);
+		/* Generating */
+		l2 = cnt; // For measuring
+		if (!depth) dest[cnt++] = '('; // Capturing group
+		dest[cnt++] = '['; // Character class
+		for (i = 0; i < n; i++ , cfrom += step)
+			dest[cnt++] = cfrom;
+		dest[cnt++] = ']'; // Character class
+		if (!depth) dest[cnt++] = ')'; // Capturing group
+		/* Return precise length */
+		return (cnt - l2);
+	}					
+	return (0); // Not a sequence
 }
 
-/* --------------------------------------------------------------------------------------------- */
+static int convert_mask(char *mask, int l, char *map, char *dest)
+{
+	/* The positive named character classes known to PCRE */
+	static char *classes[] = { ":alnum:", ":alpha:", ":ascii:", ":blank:",
+		":cntrl:", ":digit:", ":graph:", ":lower:", ":print:", ":punct:",
+		":space:", ":upper:", ":word:", ":xdigit:", NULL };
+	static char quot[256];
+	char c2[3] = " ]";
+	char c, *p, *p0, **px;
+	int i, n, depth, fail, class, cnt, first;
+
+	/* Init quoting table */
+	if (!quot[(unsigned char)'\\'])
+	{
+		for (p = ".\\+*?[^]$(){}|"; *p; p++) quot[(unsigned char)*p] |= 1;
+		for (p = "\\[^]-"; *p; p++) quot[(unsigned char)*p] |= 2;
+		for (p = ".=:"; *p; p++) quot[(unsigned char)*p] |= 4;
+	}
+
+	cnt = i = depth = 0;
+	while (TRUE)
+	{
+		/* Outside a class */
+		class = 0;
+		while (!class)
+		{
+			if (i >= l) break; // All done
+			c = mask[i++];
+			switch (c)
+			{
+			case '\\': // Special
+				if (i >= l) return (-1); // Fail horribly
+				c = mask[i++];
+				break; // Do the default quoting on next char
+			case '[': // Special outside a class IF can start a class
+				if (i + 1 < l)
+				{
+					class = i;
+					continue; // Go switch mode
+				}
+				break;
+			case '?': // Special outside a class
+				if (!depth) // Capture
+				{
+					if (dest) strcpy(dest + cnt, "(.)");
+					cnt += 3;
+				}
+				else // Bare wildcard
+				{
+					if (dest) dest[cnt] = '.';
+					cnt++;
+				}
+				continue;
+			case '*': // Special outside a class
+				if (!depth) // Capture
+				{
+					if (dest) strcpy(dest + cnt, "(.*)");
+					cnt += 4;
+				}
+				else // Bare wildcard
+				{
+					if (dest) strcpy(dest + cnt, ".*");
+					cnt += 2;
+				}
+				continue;
+			case '{': // Can start brace expression
+				n = map[i - 1];
+				if (n < 2) break; // Unclosed - go emit it
+				if (n == 3) /* Proper expr: {a,b} */
+				{
+					if (!depth++) // Capturing group
+					{
+						if (dest) dest[cnt] = '(';
+						cnt++;
+					}
+					else // Non-capturing group
+					{
+						if (dest) strcpy(dest + cnt, "(?:");
+						cnt += 3;
+					}
+					continue;
+				}
+				// Sequence expr or plaintext
+				n = do_sequence(mask + i, dest, cnt, depth);
+				if (n) // Valid sequence
+				{
+					cnt += n;
+					i = strchr(mask + i, '}') + 1 - mask;
+					continue;
+				}
+				break; // Plaintext - go emit
+			case ',': // Can split brace expression
+				if (depth)
+				{
+					if (dest) dest[cnt] = '|';
+					cnt++;
+					continue;
+				}
+				break; // Just plain emit it
+			case '}': // Can end _proper_ brace expression
+				if (depth && (map[i - 1] == 3))
+				{
+					if (dest) dest[cnt] = ')';
+					cnt++;
+					depth--;
+					continue;
+				}
+				break; // Just plain emit it
+			}
+			if (quot[(unsigned char)c] & 1) // Quoted outside class
+			{
+				if (dest) dest[cnt] = '\\';
+				cnt++;
+			}
+			if (dest) dest[cnt] = c;
+			cnt++;
+		}
+		if (!class) break; // All done
+
+		/* Maybe inside a class - validation pass */
+		fail = 0;
+		first = class;
+		while ((i < l) && !fail)
+		{
+			c = mask[i++];
+			switch (c)
+			{
+			case ']': // special IF standalone & not first
+				if (i > first + 1) fail = -1; // Is a class
+				continue;
+			case '!': // special IF absolutely first
+			case '^': // same
+				if (i <= class + 1) first = i;
+				continue;
+			case '\\': // special
+				if (i >= l) return (-1); // Fail horribly
+				i++;
+				continue;
+			case '[': // may start a construct
+				if (i >= l) continue; // Go drop out
+				c2[0] = c = mask[i];
+				if (!(quot[(unsigned char)c] & 4))
+					continue; // Not a construct
+				p0 = mask + i + 1;
+				p = g_strstr_len(p0, l - (i + 1), c2);
+				if (!p) // Not properly ended
+				{
+					fail = -2; // Isn't a class
+					continue;
+				}
+				n = p - p0; // Content length
+				i = p + 2 - mask; // Skip the whole construct
+				if (c == ':') // POSIX character class
+				{
+					for (px = classes; *px; px++)
+						if (!strncmp(*px, p0 - 1, n + 2)) break;
+					if (!*px) fail = -2; // Bad class if unknown class
+					continue;
+				}
+				/* Collating elements and equivalence classes:
+				 * no proper support, devolve to the unichar */
+				n = g_utf8_strlen(p0, n);
+				if (n != 1) fail = -2; // Bad class if not a single unichar
+				continue;
+			case '{': // Can start brace expression
+				n = map[i - 1];
+				if (n < 2) continue; // Unclosed - go as normal
+				if ((n == 3) || do_sequence(mask + i, NULL, 0, 0))
+					fail = -2; // Brace expr breaks class
+				continue;
+			case ',': // Can split brace expression
+				if (depth) fail = -2; // A split breaks class
+				continue;
+			case '}': // Can end _proper_ brace expression
+				if (depth && (map[i - 1] == 3)) fail = -2; // An end breaks class
+				continue;
+			}
+		}
+		if (fail != -1) // Broken class
+		{
+			if (dest) strcpy(dest + cnt, "\\["); // Quoted
+			cnt += 2;
+			i = class;
+			continue; // Go reparse the contents
+		}
+
+		/* Definitely inside a class */
+		if (!depth) // Capture
+		{
+			if (dest) strcpy(dest + cnt, "([");
+			cnt += 2;
+		}
+		else // Bare charclass
+		{
+			if (dest) dest[cnt] = '[';
+			cnt++;
+		}
+		i = first = class;
+		fail = 0;
+		while ((i < l) && !fail)
+		{
+			c = mask[i++];
+			switch (c)
+			{
+			case ']': // special IF standalone & not first
+				if (i <= first + 1) break;
+				if (!depth) // Capture
+				{
+					if (dest) strcpy(dest + cnt, "])");
+					cnt += 2;
+				}
+				else // Bare charclass
+				{
+					if (dest) dest[cnt] = ']';
+					cnt++;
+				}
+				fail = -1;
+				continue; // Done
+			case '!': // special IF absolutely first
+			case '^': // same
+				if (i > class + 1) break;
+				first = i;
+				if (dest) dest[cnt] = '^';
+				cnt++;
+				continue;
+			case '\\': // special
+				c = mask[i++];
+				break; // Do the default quoting on next char
+			case '-': // special IF in between single exprs
+				if (mask[i] == ']') break;
+				if (dest) dest[cnt] = '-'; // Let PCRE decide specialness (TEST IT!)
+				cnt++;
+				continue;
+			case '[': // may start a construct
+				if (!(quot[(unsigned char)mask[i]] & 4))
+					break; // No construct starts with this
+				c2[0] = c = mask[i];
+				p0 = mask + i + 1;
+				p = g_strstr_len(p0, l - (i + 1), c2);
+				n = p - p0; // Content length
+				i = p + 2 - mask; // Skip the whole construct
+				if (c == ':') // POSIX character class - emit it as is
+				{
+					if (dest) memcpy(dest + cnt, p0 - 2, n + 4);
+					cnt += n + 4;
+					continue;
+				}
+				/* Collating elements and equivalence classes:
+				 * no proper support, devolve to the unichar */
+				if (quot[(unsigned char)*p0] & 2) // Quoted inside class
+				{
+					if (dest) dest[cnt] = '\\';
+					cnt++;
+				}
+				if (dest) memcpy(dest + cnt, p0, n);
+				cnt += n;
+				continue;
+			}
+			if (quot[(unsigned char)c] & 2) // Quoted inside class
+			{
+				if (dest) dest[cnt] = '\\';
+				cnt++;
+			}
+			if (dest) dest[cnt] = c;
+			cnt++;
+		}
+		/* Class is done, go outside again*/
+	}
+	/* Terminate the RE and report the length */
+	if (dest) dest[cnt] = 0;
+	return (cnt);
+}
 
-static GString *
-mc_search__translate_replace_glob_to_regex (const char *str)
+static GString *mc_search__glob_translate_to_regex(const GString *astr)
 {
-    GString *buff;
-    char cnt = '0';
-    gboolean escaped_mode = FALSE;
-
-    buff = g_string_sized_new (32);
-
-    while (*str != '\0')
-    {
-        char c = *str++;
-
-        switch (c)
-        {
-        case '\\':
-            if (!escaped_mode)
-            {
-                escaped_mode = TRUE;
-                g_string_append_c (buff, '\\');
-                continue;
-            }
-            break;
-        case '*':
-        case '?':
-            if (!escaped_mode)
-            {
-                g_string_append_c (buff, '\\');
-                c = ++cnt;
-            }
-            break;
-        case '&':
-            if (!escaped_mode)
-                g_string_append_c (buff, '\\');
-            break;
-        default:
-            break;
-        }
-        g_string_append_c (buff, c);
-        escaped_mode = FALSE;
-    }
-    return buff;
+	GString *res;
+	char *mask = astr->str, *map = NULL;
+	int l = astr->len;
+	int i, n, depth, *bs;
+
+	/* First, count possible brace blocks and validate them */
+	for (i = n = 0; i < l; i++) n += mask[i] == '{';
+	if (n)
+	{
+		map = g_malloc0(l + 1);
+		bs = g_malloc(sizeof(int) * n);
+		depth = 0;
+		for (i = 0; i < l; i++)
+		switch (mask[i])
+		{
+		case '\\':
+			i++;
+			continue;
+		case '{':
+			bs[depth++] = i;
+			continue;
+		case ',':
+			if (depth) map[bs[depth - 1]] |= 1; /* Maybe proper */
+			continue;
+		case '}':
+			if (depth) map[i] = map[bs[--depth]] |= 2; /* Terminated */
+			continue;
+		}
+		g_free(bs);
+	}
+
+	/* Then, measure the string */
+	n = convert_mask(mask, l, map, NULL);
+	/* A horrible failure should never match anything */
+	if (n < 0) res = g_string_new("(?!x)x");
+	/* Otherwise, allocate and fill the RE */
+	else
+	{
+		res = g_string_sized_new(n);
+		res->len = convert_mask(mask, l, map, res->str);
+	}
+	g_free(map);
+	/* And finally, return it */
+	return (res);
+}
+
+static GString *mc_search__translate_replace_glob_to_regex(const char *str)
+{
+	GString *res;
+	const char *s;
+	char c, *dest;
+	int esc, l = 1, cnt = 0, d = 0;
+
+
+	/* Count the chars that need quoting, and the unquoted globs */
+	for (esc = 0 , s = str; (c = *s++); esc--)
+	{
+		if (esc > 0) d += (c >= '0') & (c <= '9'); // "\0".."\9"
+		else
+		{
+			d += c == '$';	// "${N}"
+			cnt += (c == '*') | (c == '?'); // "*", "?"
+			esc = 1 + (c == '\\');
+		}
+	}
+
+	/* Calculate the upper bound of what indices add */
+	if (cnt > 9) l = snprintf(NULL, 0, "${%d}", cnt) - 1;
+
+	/* Allocate the buffer */
+	res = g_string_sized_new(strlen(str) + l * cnt + d);
+
+	/* Write the string */
+	l += 2;
+	dest = res->str;
+	cnt = 1;
+	for (esc = 0 , s = str; (c = *s++); esc--)
+	{
+		if (esc > 0)
+		{
+			if ((c >= '0') & (c <= '9')) *dest++ = '\\'; // Quote "\0".."\9"
+		}
+		else if (c == '$') *dest++ = '\\'; // Quote "${N}"
+		else if ((c == '*') | (c == '?')) // Convert globs to insertion markers
+		{
+			dest += snprintf(dest, l, cnt > 9 ? "${%d}" : "\\%d", cnt);
+			cnt++;
+			continue;
+		}
+		else if (c == '\\') esc = 2;
+		*dest++ = c;
+	}
+	*dest = 0;
+	res->len = dest - res->str;
+
+	/* Return the result */
+	return (res);
 }
 
 /*** public functions ****************************************************************************/
diff -ur mc-4.8.27.prev/lib/search/search.c mc-4.8.27/lib/search/search.c
--- mc-4.8.27.prev/lib/search/search.c	2021-08-01 19:45:58.000000000 +0300
+++ mc-4.8.27/lib/search/search.c	2025-02-27 00:24:50.370762950 +0200
@@ -394,8 +394,16 @@
     GString *ret;
     GString *replace_str2;
 
+	if (!replace_str) // NULL means asking for a full copy
+	{
+		replace_str2 = g_string_new("\\0");
+		ret = mc_search_regex_prepare_replace_str(lc_mc_search, replace_str2);
+	}
+	else
+	{
     replace_str2 = g_string_new (replace_str);
     ret = mc_search_prepare_replace_str (lc_mc_search, replace_str2);
+	}
     g_string_free (replace_str2, TRUE);
     return (ret != NULL) ? g_string_free (ret, FALSE) : NULL;
 }
diff -ur mc-4.8.27.prev/src/filemanager/filegui.c mc-4.8.27/src/filemanager/filegui.c
--- mc-4.8.27.prev/src/filemanager/filegui.c	2021-08-01 19:45:58.000000000 +0300
+++ mc-4.8.27/src/filemanager/filegui.c	2025-02-27 00:24:50.371762950 +0200
@@ -1444,7 +1444,7 @@
             || (ctx->dive_into_subdirs
                 && ((!only_one && !is_wildcarded (ctx->dest_mask))
                     || (only_one && mc_stat (vpath, &buf) == 0 && S_ISDIR (buf.st_mode)))))
-            ctx->dest_mask = g_strdup ("\\0");
+            ctx->dest_mask = NULL; // Used as flag to ask for a full copy
         else
         {
             ctx->dest_mask = g_strdup (ctx->dest_mask);

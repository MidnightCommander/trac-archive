diff --git a/src/vfs/sftpfs/internal.c b/src/vfs/sftpfs/internal.c
index 5377b66e5..69a8684ad 100644
--- a/src/vfs/sftpfs/internal.c
+++ b/src/vfs/sftpfs/internal.c
@@ -30,20 +30,149 @@
 #include "lib/global.h"
 #include "lib/util.h"
 
+#include "src/filemanager/ioblksize.h"          /* IO_BUFSIZE */
+
 #include "internal.h"
 
+
+
 /*** global variables ****************************************************************************/
 
 GString *sftpfs_filename_buffer = NULL;
 
 /*** file scope macro definitions ****************************************************************/
+#define mc_return_val_if_error_and_free(mcerror, mcvalue, to_free) \
+    do {                                                           \
+        if (mcerror != NULL && *mcerror != NULL)                   \
+        {                                                          \
+            if (to_free != NULL)                                   \
+                g_free(to_free);                                   \
+            return mcvalue;                                        \
+        }                                                          \
+    } while (0)
+
+#define _is_sftp_proto_error(super_data, res, libssh_errno)             \
+    ((res == LIBSSH2_ERROR_SFTP_PROTOCOL) &&                            \
+     (libssh2_sftp_last_error((super_data)->sftp_session) == libssh_errno))
 
 /*** file scope type declarations ****************************************************************/
 
 /*** file scope variables ************************************************************************/
 
 /*** file scope functions ************************************************************************/
+
+static int
+_waitsocket_or_error(sftpfs_super_data_t *super_data, int res,
+                     GError ** mcerror, void *to_free)
+{
+    if (res != LIBSSH2_ERROR_EAGAIN)
+    {
+        sftpfs_ssherror_to_gliberror (super_data, res, mcerror);
+        if (to_free != NULL)
+            g_free(to_free);
+        return -1;
+    }
+
+    sftpfs_waitsocket (super_data, mcerror);
+    mc_return_val_if_error_and_free (mcerror, -1, to_free);
+
+    return 0;
+}
+
 /* --------------------------------------------------------------------------------------------- */
+static int
+_sftpfs_op_init(sftpfs_super_data_t ** super_data,
+                const vfs_path_element_t ** path_element,
+                const vfs_path_t * vpath, GError ** mcerror)
+{
+    struct vfs_s_super *super;
+
+    mc_return_val_if_error (mcerror, -1);
+
+    *path_element = vfs_path_get_by_index (vpath, -1);
+
+    if (vfs_s_get_path (vpath, &super, 0) == NULL)
+        return -1;
+
+    if (super == NULL)
+        return -1;
+
+    *super_data = (sftpfs_super_data_t *) super->data;
+    if ((*super_data)->sftp_session == NULL)
+        return -1;
+
+    return 0;
+}
+
+/* --------------------------------------------------------------------------------------------- */
+
+static int
+_sftpfs_stat (sftpfs_super_data_t ** super_data,
+              const vfs_path_element_t ** path_element,
+              const vfs_path_t * vpath, GError ** mcerror, const int stat_type,
+              LIBSSH2_SFTP_ATTRIBUTES *attrs)
+{
+    int res;
+
+    if (_sftpfs_op_init(super_data, path_element, vpath, mcerror) != 0)
+        return -1;
+
+    do
+    {
+        const char *fixfname;
+
+        fixfname = sftpfs_fix_filename ((*path_element)->path);
+
+        res = libssh2_sftp_stat_ex ((*super_data)->sftp_session, fixfname,
+                                    sftpfs_filename_buffer->len,
+                                    stat_type, attrs);
+
+        if (res >= 0)
+            break;
+
+        if (_is_sftp_proto_error(*super_data, res,
+                                LIBSSH2_FX_PERMISSION_DENIED))
+            return EACCES;
+
+        if (_is_sftp_proto_error(*super_data, res, LIBSSH2_FX_NO_SUCH_FILE))
+            return ENOENT;
+
+        if (_waitsocket_or_error(*super_data, res, mcerror, NULL) != 0)
+            return -1;
+    }
+    while (res == LIBSSH2_ERROR_EAGAIN);
+
+    return res;
+}
+
+/* --------------------------------------------------------------------------------------------- */
+
+static void
+_sftpfs_attr_to_buf(struct stat *buf, LIBSSH2_SFTP_ATTRIBUTES *attrs)
+{
+    if ((attrs->flags & LIBSSH2_SFTP_ATTR_UIDGID) != 0)
+    {
+        buf->st_uid = attrs->uid;
+        buf->st_gid = attrs->gid;
+    }
+
+    if ((attrs->flags & LIBSSH2_SFTP_ATTR_ACMODTIME) != 0)
+    {
+        buf->st_atime = attrs->atime;
+        buf->st_mtime = attrs->mtime;
+        buf->st_ctime = attrs->mtime;
+    }
+
+    if ((attrs->flags & LIBSSH2_SFTP_ATTR_SIZE) != 0)
+        buf->st_size = attrs->filesize;
+
+    if ((attrs->flags & LIBSSH2_SFTP_ATTR_PERMISSIONS) != 0)
+        buf->st_mode = attrs->permissions;
+
+    /* patch or segfault here */
+    buf->st_blksize = IO_BUFSIZE;
+    buf->st_blocks = 1 + ((buf->st_size - 1) / buf->st_blksize);
+}
 
 /* --------------------------------------------------------------------------------------------- */
 /*** public functions ****************************************************************************/
@@ -65,7 +194,14 @@ sftpfs_ssherror_to_gliberror (sftpfs_super_data_t * super_data, int libssh_errno
     mc_return_if_error (mcerror);
 
     libssh2_session_last_error (super_data->session, &err, &err_len, 1);
-    mc_propagate_error (mcerror, libssh_errno, "%s", err);
+    if (libssh_errno == LIBSSH2_ERROR_SFTP_PROTOCOL &&
+        super_data->sftp_session != NULL)
+    {
+        mc_propagate_error (mcerror, libssh_errno, "%s %lu", err,
+                            libssh2_sftp_last_error(super_data->sftp_session));
+    } else {
+        mc_propagate_error (mcerror, libssh_errno, "%s", err);
+    }
     g_free (err);
 }
 
@@ -132,66 +268,18 @@ sftpfs_waitsocket (sftpfs_super_data_t * super_data, GError ** mcerror)
 int
 sftpfs_lstat (const vfs_path_t * vpath, struct stat *buf, GError ** mcerror)
 {
-    struct vfs_s_super *super;
+    const vfs_path_element_t *path_element;
     sftpfs_super_data_t *super_data;
     LIBSSH2_SFTP_ATTRIBUTES attrs;
     int res;
-    const vfs_path_element_t *path_element;
-
-    mc_return_val_if_error (mcerror, -1);
-
-    path_element = vfs_path_get_by_index (vpath, -1);
-
-    if (vfs_s_get_path (vpath, &super, 0) == NULL)
-        return -1;
-
-    if (super == NULL)
-        return -1;
-
-    super_data = (sftpfs_super_data_t *) super->data;
-    if (super_data->sftp_session == NULL)
-        return -1;
-
-    do
-    {
-        const char *fixfname;
-
-        fixfname = sftpfs_fix_filename (path_element->path);
 
-        res = libssh2_sftp_stat_ex (super_data->sftp_session, fixfname,
-                                    sftpfs_filename_buffer->len, LIBSSH2_SFTP_LSTAT, &attrs);
-        if (res >= 0)
-            break;
+    res = _sftpfs_stat (&super_data, &path_element, vpath, mcerror,
+                        LIBSSH2_SFTP_LSTAT, &attrs);
 
-        if (res != LIBSSH2_ERROR_EAGAIN)
-        {
-            sftpfs_ssherror_to_gliberror (super_data, res, mcerror);
-            return -1;
-        }
+    if (res == -1 || res == EACCES || res == ENOENT)
+        return res;
 
-        sftpfs_waitsocket (super_data, mcerror);
-        mc_return_val_if_error (mcerror, -1);
-    }
-    while (res == LIBSSH2_ERROR_EAGAIN);
-
-    if ((attrs.flags & LIBSSH2_SFTP_ATTR_UIDGID) != 0)
-    {
-        buf->st_uid = attrs.uid;
-        buf->st_gid = attrs.gid;
-    }
-
-    if ((attrs.flags & LIBSSH2_SFTP_ATTR_ACMODTIME) != 0)
-    {
-        buf->st_atime = attrs.atime;
-        buf->st_mtime = attrs.mtime;
-        buf->st_ctime = attrs.mtime;
-    }
-
-    if ((attrs.flags & LIBSSH2_SFTP_ATTR_SIZE) != 0)
-        buf->st_size = attrs.filesize;
-
-    if ((attrs.flags & LIBSSH2_SFTP_ATTR_PERMISSIONS) != 0)
-        buf->st_mode = attrs.permissions;
+    _sftpfs_attr_to_buf(buf, &attrs);
 
     return 0;
 }
@@ -209,68 +297,20 @@ sftpfs_lstat (const vfs_path_t * vpath, struct stat *buf, GError ** mcerror)
 int
 sftpfs_stat (const vfs_path_t * vpath, struct stat *buf, GError ** mcerror)
 {
-    struct vfs_s_super *super;
+    const vfs_path_element_t *path_element;
     sftpfs_super_data_t *super_data;
     LIBSSH2_SFTP_ATTRIBUTES attrs;
     int res;
-    const vfs_path_element_t *path_element;
-
-    mc_return_val_if_error (mcerror, -1);
-
-    path_element = vfs_path_get_by_index (vpath, -1);
-
-    if (vfs_s_get_path (vpath, &super, 0) == NULL)
-        return -1;
-
-    if (super == NULL)
-        return -1;
 
-    super_data = (sftpfs_super_data_t *) super->data;
-    if (super_data->sftp_session == NULL)
-        return -1;
-
-    do
-    {
-        const char *fixfname;
-
-        fixfname = sftpfs_fix_filename (path_element->path);
+    res = _sftpfs_stat (&super_data, &path_element, vpath, mcerror,
+                        LIBSSH2_SFTP_STAT, &attrs);
 
-        res =
-            libssh2_sftp_stat_ex (super_data->sftp_session,
-                                  fixfname, sftpfs_filename_buffer->len, LIBSSH2_SFTP_STAT, &attrs);
-        if (res >= 0)
-            break;
-
-        if (res != LIBSSH2_ERROR_EAGAIN)
-        {
-            sftpfs_ssherror_to_gliberror (super_data, res, mcerror);
-            return -1;
-        }
-
-        sftpfs_waitsocket (super_data, mcerror);
-        mc_return_val_if_error (mcerror, -1);
-    }
-    while (res == LIBSSH2_ERROR_EAGAIN);
+    if (res == -1 || res == EACCES || res == ENOENT)
+        return res;
 
     buf->st_nlink = 1;
-    if ((attrs.flags & LIBSSH2_SFTP_ATTR_UIDGID) != 0)
-    {
-        buf->st_uid = attrs.uid;
-        buf->st_gid = attrs.gid;
-    }
-
-    if ((attrs.flags & LIBSSH2_SFTP_ATTR_ACMODTIME) != 0)
-    {
-        buf->st_atime = attrs.atime;
-        buf->st_mtime = attrs.mtime;
-        buf->st_ctime = attrs.mtime;
-    }
 
-    if ((attrs.flags & LIBSSH2_SFTP_ATTR_SIZE) != 0)
-        buf->st_size = attrs.filesize;
-
-    if ((attrs.flags & LIBSSH2_SFTP_ATTR_PERMISSIONS) != 0)
-        buf->st_mode = attrs.permissions;
+    _sftpfs_attr_to_buf(buf, &attrs);
 
     return 0;
 }
@@ -289,23 +329,11 @@ sftpfs_stat (const vfs_path_t * vpath, struct stat *buf, GError ** mcerror)
 int
 sftpfs_readlink (const vfs_path_t * vpath, char *buf, size_t size, GError ** mcerror)
 {
-    struct vfs_s_super *super;
+    const vfs_path_element_t *path_element;
     sftpfs_super_data_t *super_data;
     int res;
-    const vfs_path_element_t *path_element;
-
-    mc_return_val_if_error (mcerror, -1);
 
-    path_element = vfs_path_get_by_index (vpath, -1);
-
-    if (vfs_s_get_path (vpath, &super, 0) == NULL)
-        return -1;
-
-    if (super == NULL)
-        return -1;
-
-    super_data = (sftpfs_super_data_t *) super->data;
-    if (super_data->sftp_session == NULL)
+    if (_sftpfs_op_init(&super_data, &path_element, vpath, mcerror) != 0)
         return -1;
 
     do
@@ -314,18 +342,13 @@ sftpfs_readlink (const vfs_path_t * vpath, char *buf, size_t size, GError ** mce
 
         fixfname = sftpfs_fix_filename (path_element->path);
 
-        res = libssh2_sftp_readlink (super_data->sftp_session, fixfname, buf, size);
+        res = libssh2_sftp_readlink (super_data->sftp_session, fixfname,
+                                     buf, size);
         if (res >= 0)
             break;
 
-        if (res != LIBSSH2_ERROR_EAGAIN)
-        {
-            sftpfs_ssherror_to_gliberror (super_data, res, mcerror);
+        if (_waitsocket_or_error(super_data, res,mcerror, NULL) != 0)
             return -1;
-        }
-
-        sftpfs_waitsocket (super_data, mcerror);
-        mc_return_val_if_error (mcerror, -1);
     }
     while (res == LIBSSH2_ERROR_EAGAIN);
 
@@ -345,25 +368,13 @@ sftpfs_readlink (const vfs_path_t * vpath, char *buf, size_t size, GError ** mce
 int
 sftpfs_symlink (const vfs_path_t * vpath1, const vfs_path_t * vpath2, GError ** mcerror)
 {
-    struct vfs_s_super *super;
-    sftpfs_super_data_t *super_data;
     const vfs_path_element_t *path_element1;
     const vfs_path_element_t *path_element2;
+    sftpfs_super_data_t *super_data;
     char *tmp_path;
     int res;
 
-    mc_return_val_if_error (mcerror, -1);
-
-    path_element2 = vfs_path_get_by_index (vpath2, -1);
-
-    if (vfs_s_get_path (vpath2, &super, 0) == NULL)
-        return -1;
-
-    if (super == NULL)
-        return -1;
-
-    super_data = (sftpfs_super_data_t *) super->data;
-    if (super_data->sftp_session == NULL)
+    if (_sftpfs_op_init(&super_data, &path_element2, vpath2, mcerror) != 0)
         return -1;
 
     tmp_path = g_strdup_printf ("%c%s", PATH_SEP, path_element2->path);
@@ -375,27 +386,14 @@ sftpfs_symlink (const vfs_path_t * vpath1, const vfs_path_t * vpath2, GError **
 
         fixfname = sftpfs_fix_filename (path_element1->path);
 
-        res =
-            libssh2_sftp_symlink_ex (super_data->sftp_session,
-                                     fixfname,
-                                     sftpfs_filename_buffer->len, tmp_path, strlen (tmp_path),
-                                     LIBSSH2_SFTP_SYMLINK);
+        res = libssh2_sftp_symlink_ex (super_data->sftp_session, fixfname,
+                                       sftpfs_filename_buffer->len, tmp_path,
+                                       strlen (tmp_path), LIBSSH2_SFTP_SYMLINK);
         if (res >= 0)
             break;
 
-        if (res != LIBSSH2_ERROR_EAGAIN)
-        {
-            sftpfs_ssherror_to_gliberror (super_data, res, mcerror);
-            g_free (tmp_path);
-            return -1;
-        }
-
-        sftpfs_waitsocket (super_data, mcerror);
-        if (mcerror != NULL && *mcerror != NULL)
-        {
-            g_free (tmp_path);
+        if (_waitsocket_or_error(super_data, res,mcerror, tmp_path) != 0)
             return -1;
-        }
     }
     while (res == LIBSSH2_ERROR_EAGAIN);
     g_free (tmp_path);
@@ -416,25 +414,18 @@ sftpfs_symlink (const vfs_path_t * vpath1, const vfs_path_t * vpath2, GError **
 int
 sftpfs_chmod (const vfs_path_t * vpath, mode_t mode, GError ** mcerror)
 {
-    struct vfs_s_super *super;
+    const vfs_path_element_t *path_element;
     sftpfs_super_data_t *super_data;
     LIBSSH2_SFTP_ATTRIBUTES attrs;
     int res;
-    const vfs_path_element_t *path_element;
 
-    mc_return_val_if_error (mcerror, -1);
+    res = _sftpfs_stat(&super_data, &path_element, vpath, mcerror,
+                       LIBSSH2_SFTP_LSTAT, &attrs);
 
-    path_element = vfs_path_get_by_index (vpath, -1);
+    if (res == -1 || res == EACCES || res == ENOENT)
+        return res;
 
-    if (vfs_s_get_path (vpath, &super, 0) == NULL)
-        return -1;
-
-    if (super == NULL)
-        return -1;
-
-    super_data = (sftpfs_super_data_t *) super->data;
-    if (super_data->sftp_session == NULL)
-        return -1;
+    attrs.permissions = mode;
 
     do
     {
@@ -443,43 +434,25 @@ sftpfs_chmod (const vfs_path_t * vpath, mode_t mode, GError ** mcerror)
         fixfname = sftpfs_fix_filename (path_element->path);
 
         res = libssh2_sftp_stat_ex (super_data->sftp_session, fixfname,
-                                    sftpfs_filename_buffer->len, LIBSSH2_SFTP_LSTAT, &attrs);
+                                    sftpfs_filename_buffer->len,
+                                    LIBSSH2_SFTP_SETSTAT, &attrs);
         if (res >= 0)
             break;
 
-        if (res != LIBSSH2_ERROR_EAGAIN)
+        if (_is_sftp_proto_error(super_data, res, LIBSSH2_FX_FAILURE))
         {
-            sftpfs_ssherror_to_gliberror (super_data, res, mcerror);
-            return -1;
+            res = 0;  /* need something like ftpfs_ignore_chattr_errors */
+            break;
         }
 
-        sftpfs_waitsocket (super_data, mcerror);
-        mc_return_val_if_error (mcerror, -1);
-    }
-    while (res == LIBSSH2_ERROR_EAGAIN);
+        if (_is_sftp_proto_error(super_data, res, LIBSSH2_FX_NO_SUCH_FILE))
+            return ENOENT;
 
-    attrs.permissions = mode;
-
-    do
-    {
-        const char *fixfname;
-
-        fixfname = sftpfs_fix_filename (path_element->path);
-
-        res = libssh2_sftp_stat_ex (super_data->sftp_session, fixfname,
-                                    sftpfs_filename_buffer->len, LIBSSH2_SFTP_SETSTAT, &attrs);
-        if (res >= 0)
-            break;
-        else if (res != LIBSSH2_ERROR_EAGAIN)
-        {
-            sftpfs_ssherror_to_gliberror (super_data, res, mcerror);
+        if (_waitsocket_or_error(super_data, res,mcerror, NULL) != 0)
             return -1;
-        }
-
-        sftpfs_waitsocket (super_data, mcerror);
-        mc_return_val_if_error (mcerror, -1);
     }
     while (res == LIBSSH2_ERROR_EAGAIN);
+
     return res;
 }
 
@@ -495,23 +468,11 @@ sftpfs_chmod (const vfs_path_t * vpath, mode_t mode, GError ** mcerror)
 int
 sftpfs_unlink (const vfs_path_t * vpath, GError ** mcerror)
 {
-    struct vfs_s_super *super;
+    const vfs_path_element_t *path_element;
     sftpfs_super_data_t *super_data;
     int res;
-    const vfs_path_element_t *path_element;
 
-    mc_return_val_if_error (mcerror, -1);
-
-    path_element = vfs_path_get_by_index (vpath, -1);
-
-    if (vfs_s_get_path (vpath, &super, 0) == NULL)
-        return -1;
-
-    if (super == NULL)
-        return -1;
-
-    super_data = (sftpfs_super_data_t *) super->data;
-    if (super_data->sftp_session == NULL)
+    if (_sftpfs_op_init(&super_data, &path_element, vpath, mcerror) != 0)
         return -1;
 
     do
@@ -520,20 +481,13 @@ sftpfs_unlink (const vfs_path_t * vpath, GError ** mcerror)
 
         fixfname = sftpfs_fix_filename (path_element->path);
 
-        res =
-            libssh2_sftp_unlink_ex (super_data->sftp_session, fixfname,
-                                    sftpfs_filename_buffer->len);
+        res = libssh2_sftp_unlink_ex (super_data->sftp_session, fixfname,
+                                      sftpfs_filename_buffer->len);
         if (res >= 0)
             break;
 
-        if (res != LIBSSH2_ERROR_EAGAIN)
-        {
-            sftpfs_ssherror_to_gliberror (super_data, res, mcerror);
+        if (_waitsocket_or_error(super_data, res,mcerror, NULL) != 0)
             return -1;
-        }
-
-        sftpfs_waitsocket (super_data, mcerror);
-        mc_return_val_if_error (mcerror, -1);
     }
     while (res == LIBSSH2_ERROR_EAGAIN);
 
@@ -553,24 +507,13 @@ sftpfs_unlink (const vfs_path_t * vpath, GError ** mcerror)
 int
 sftpfs_rename (const vfs_path_t * vpath1, const vfs_path_t * vpath2, GError ** mcerror)
 {
-    struct vfs_s_super *super;
-    sftpfs_super_data_t *super_data;
     const vfs_path_element_t *path_element1;
     const vfs_path_element_t *path_element2;
+    sftpfs_super_data_t *super_data;
     char *tmp_path;
     int res;
 
-    mc_return_val_if_error (mcerror, -1);
-    path_element2 = vfs_path_get_by_index (vpath2, -1);
-
-    if (vfs_s_get_path (vpath2, &super, 0) == NULL)
-        return -1;
-
-    if (super == NULL)
-        return -1;
-
-    super_data = (sftpfs_super_data_t *) super->data;
-    if (super_data->sftp_session == NULL)
+    if (_sftpfs_op_init(&super_data, &path_element2, vpath2, mcerror) != 0)
         return -1;
 
     tmp_path = g_strdup_printf ("%c%s", PATH_SEP, path_element2->path);
@@ -582,26 +525,15 @@ sftpfs_rename (const vfs_path_t * vpath1, const vfs_path_t * vpath2, GError ** m
 
         fixfname = sftpfs_fix_filename (path_element1->path);
 
-        res = libssh2_sftp_rename_ex
-            (super_data->sftp_session,
-             fixfname,
-             sftpfs_filename_buffer->len, tmp_path, strlen (tmp_path), LIBSSH2_SFTP_SYMLINK);
+        res = libssh2_sftp_rename_ex (super_data->sftp_session, fixfname,
+                                      sftpfs_filename_buffer->len, tmp_path,
+                                      strlen (tmp_path), LIBSSH2_SFTP_SYMLINK);
+
         if (res >= 0)
             break;
 
-        if (res != LIBSSH2_ERROR_EAGAIN)
-        {
-            sftpfs_ssherror_to_gliberror (super_data, res, mcerror);
-            g_free (tmp_path);
+        if (_waitsocket_or_error(super_data, res,mcerror, tmp_path) != 0)
             return -1;
-        }
-
-        sftpfs_waitsocket (super_data, mcerror);
-        if (mcerror != NULL && *mcerror != NULL)
-        {
-            g_free (tmp_path);
-            return -1;
-        }
     }
     while (res == LIBSSH2_ERROR_EAGAIN);
     g_free (tmp_path);

From 13d70744310791dfc692786cd0033ee08e9357a9 Mon Sep 17 00:00:00 2001
From: Sebastian Gniazdowski <sgniazdowski@gmail.com>
Date: Wed, 13 Jan 2021 22:00:56 -0600
Subject: [PATCH] Improve safety of previous char fetching string functions.

---
 lib/strutil.h               | 30 +++++++++---------
 lib/strutil/strutil.c       | 32 +++++++++----------
 lib/strutil/strutil8bit.c   |  4 ++-
 lib/strutil/strutilascii.c  |  4 ++-
 lib/strutil/strutilutf8.c   | 36 ++++++++++++++++-----
 lib/widget/input.c          | 30 ++++++++++++------
 lib/widget/input_complete.c | 62 ++++++++++++++++++++++++-------------
 src/help.c                  |  2 +-
 src/usermenu.c              | 46 ++++++++++++++-------------
 9 files changed, 153 insertions(+), 93 deletions(-)

diff --git a/lib/strutil.h b/lib/strutil.h
index a091c25aa..667f7df2e 100644
--- a/lib/strutil.h
+++ b/lib/strutil.h
@@ -110,9 +110,9 @@ struct str_class
     gboolean (*is_valid_string) (const char *);
       /*I*/ int (*is_valid_char) (const char *, size_t);
       /*I*/ void (*cnext_char) (const char **);
-    void (*cprev_char) (const char **);
+    void (*cprev_char) (const char **, const char *begin);
     void (*cnext_char_safe) (const char **);
-      /*I*/ void (*cprev_char_safe) (const char **);
+      /*I*/ void (*cprev_char_safe) (const char **, const char *begin);
       /*I*/ int (*cnext_noncomb_char) (const char **text);
       /*I*/ int (*cprev_noncomb_char) (const char **text, const char *begin);
       /*I*/ gboolean (*char_isspace) (const char *);
@@ -262,20 +262,20 @@ int str_is_valid_char (const char *ch, size_t size);
 char *str_get_next_char (char *text);
 const char *str_cget_next_char (const char *text);
 
-/* return previous characters before text, do not call on the start of strings
+/* return previous characters before text
  */
-char *str_get_prev_char (char *text);
-const char *str_cget_prev_char (const char *text);
+char *str_get_prev_char (char *text, const char *begin);
+const char *str_cget_prev_char (const char *text, const char *begin);
 
 /* set text to next characters, do not call on the end of string
  */
 void str_next_char (char **text);
 void str_cnext_char (const char **text);
 
-/* set text to previous characters, do not call on the start of strings
+/* set text to previous characters
  */
-void str_prev_char (char **text);
-void str_cprev_char (const char **text);
+void str_prev_char (char **text, const char *begin);
+void str_cprev_char (const char **text, const char *begin);
 
 /* return next characters after text, do not call on the end of string
  * works with invalid string 
@@ -284,12 +284,11 @@ void str_cprev_char (const char **text);
 char *str_get_next_char_safe (char *text);
 const char *str_cget_next_char_safe (const char *text);
 
-/* return previous characters before text, do not call on the start of strings
- * works with invalid string 
+/* return previous characters before text, works with invalid string
  * I
  */
-char *str_get_prev_char_safe (char *text);
-const char *str_cget_prev_char_safe (const char *text);
+char *str_get_prev_char_safe (char *text, const char *begin);
+const char *str_cget_prev_char_safe (const char *text, const char *begin);
 
 /* set text to next characters, do not call on the end of string
  * works with invalid string 
@@ -298,12 +297,11 @@ const char *str_cget_prev_char_safe (const char *text);
 void str_next_char_safe (char **text);
 void str_cnext_char_safe (const char **text);
 
-/* set text to previous characters, do not call on the start of strings
- * works with invalid string 
+/* set text to previous characters, works with invalid string
  * I
  */
-void str_prev_char_safe (char **text);
-void str_cprev_char_safe (const char **text);
+void str_prev_char_safe (char **text, const char *begin);
+void str_cprev_char_safe (const char **text, const char *begin);
 
 /* set text to next noncombining characters, check the end of text
  * return how many characters was skipped
diff --git a/lib/strutil/strutil.c b/lib/strutil/strutil.c
index cf11d00d8..937256260 100644
--- a/lib/strutil/strutil.c
+++ b/lib/strutil/strutil.c
@@ -507,35 +507,35 @@ str_cnext_char (const char **text)
 /* --------------------------------------------------------------------------------------------- */
 
 char *
-str_get_prev_char (char *text)
+str_get_prev_char (char *text, const char *begin)
 {
-    used_class.cprev_char ((const char **) &text);
+    used_class.cprev_char ((const char **) &text, begin);
     return text;
 }
 
 /* --------------------------------------------------------------------------------------------- */
 
 const char *
-str_cget_prev_char (const char *text)
+str_cget_prev_char (const char *text, const char *begin)
 {
-    used_class.cprev_char (&text);
+    used_class.cprev_char (&text, begin);
     return text;
 }
 
 /* --------------------------------------------------------------------------------------------- */
 
 void
-str_prev_char (char **text)
+str_prev_char (char **text, const char *begin)
 {
-    used_class.cprev_char ((const char **) text);
+    used_class.cprev_char ((const char **) text, begin);
 }
 
 /* --------------------------------------------------------------------------------------------- */
 
 void
-str_cprev_char (const char **text)
+str_cprev_char (const char **text, const char *begin)
 {
-    used_class.cprev_char (text);
+    used_class.cprev_char (text, begin);
 }
 
 /* --------------------------------------------------------------------------------------------- */
@@ -575,35 +575,35 @@ str_cnext_char_safe (const char **text)
 /* --------------------------------------------------------------------------------------------- */
 
 char *
-str_get_prev_char_safe (char *text)
+str_get_prev_char_safe (char *text, const char *begin)
 {
-    used_class.cprev_char_safe ((const char **) &text);
+    used_class.cprev_char_safe ((const char **) &text, begin);
     return text;
 }
 
 /* --------------------------------------------------------------------------------------------- */
 
 const char *
-str_cget_prev_char_safe (const char *text)
+str_cget_prev_char_safe (const char *text, const char *begin)
 {
-    used_class.cprev_char_safe (&text);
+    used_class.cprev_char_safe (&text, begin);
     return text;
 }
 
 /* --------------------------------------------------------------------------------------------- */
 
 void
-str_prev_char_safe (char **text)
+str_prev_char_safe (char **text, const char *begin)
 {
-    used_class.cprev_char_safe ((const char **) text);
+    used_class.cprev_char_safe ((const char **) text, begin);
 }
 
 /* --------------------------------------------------------------------------------------------- */
 
 void
-str_cprev_char_safe (const char **text)
+str_cprev_char_safe (const char **text, const char *begin)
 {
-    used_class.cprev_char_safe (text);
+    used_class.cprev_char_safe (text, begin);
 }
 
 /* --------------------------------------------------------------------------------------------- */
diff --git a/lib/strutil/strutil8bit.c b/lib/strutil/strutil8bit.c
index fa7bbf6a4..755a66ddb 100644
--- a/lib/strutil/strutil8bit.c
+++ b/lib/strutil/strutil8bit.c
@@ -112,9 +112,11 @@ str_8bit_cnext_char (const char **text)
 /* --------------------------------------------------------------------------------------------- */
 
 static void
-str_8bit_cprev_char (const char **text)
+str_8bit_cprev_char (const char **text, const char *begin)
 {
     (*text)--;
+    if (*text < begin)
+        *text = NULL;
 }
 
 /* --------------------------------------------------------------------------------------------- */
diff --git a/lib/strutil/strutilascii.c b/lib/strutil/strutilascii.c
index 7a585303e..a18d34bd7 100644
--- a/lib/strutil/strutilascii.c
+++ b/lib/strutil/strutilascii.c
@@ -85,9 +85,11 @@ str_ascii_cnext_char (const char **text)
 /* --------------------------------------------------------------------------------------------- */
 
 static void
-str_ascii_cprev_char (const char **text)
+str_ascii_cprev_char (const char **text, const char *begin)
 {
     (*text)--;
+    if (*text < begin)
+        *text = NULL;
 }
 
 /* --------------------------------------------------------------------------------------------- */
diff --git a/lib/strutil/strutilutf8.c b/lib/strutil/strutilutf8.c
index 5ac0015e6..b05283acd 100644
--- a/lib/strutil/strutilutf8.c
+++ b/lib/strutil/strutilutf8.c
@@ -117,9 +117,9 @@ str_utf8_cnext_char (const char **text)
 /* --------------------------------------------------------------------------------------------- */
 
 static void
-str_utf8_cprev_char (const char **text)
+str_utf8_cprev_char (const char **text, const char *begin)
 {
-    (*text) = g_utf8_prev_char (*text);
+    (*text) = g_utf8_find_prev_char (begin, *text);
 }
 
 /* --------------------------------------------------------------------------------------------- */
@@ -136,17 +136,28 @@ str_utf8_cnext_char_safe (const char **text)
 /* --------------------------------------------------------------------------------------------- */
 
 static void
-str_utf8_cprev_char_safe (const char **text)
+str_utf8_cprev_char_safe (const char **text, const char *begin)
 {
     const char *result, *t;
 
-    result = g_utf8_prev_char (*text);
+    result = g_utf8_find_prev_char (begin, *text);
+    /* Beginning of the string reached (if NULL)? */
+    if (!result)
+    {
+        *text = NULL;
+        return;
+    }
+
     t = result;
     str_utf8_cnext_char_safe (&t);
     if (t == *text)
         (*text) = result;
     else
         (*text)--;
+
+    /* Additional check to ensure no buffer underruns. */
+    if (*text && *text < begin)
+        *text = NULL;
 }
 
 /* --------------------------------------------------------------------------------------------- */
@@ -262,7 +273,7 @@ str_utf8_cprev_noncomb_char (const char **text, const char *begin)
 
     while ((*text) != begin)
     {
-        str_utf8_cprev_char_safe (text);
+        str_utf8_cprev_char_safe (text, begin);
         count++;
         if (!str_utf8_iscombiningmark (*text))
             break;
@@ -889,19 +900,30 @@ str_utf8_trunc (const char *text, int width)
 }
 
 /* --------------------------------------------------------------------------------------------- */
+/* Converts a character index into a byte offset. */
 
 static int
 str_utf8_offset_to_pos (const char *text, size_t length)
 {
-    if (str_utf8_is_valid_string (text))
+    glong size;
+
+    if (str_utf8_is_valid_string (text)) {
+        /* Limit index by string size. */
+        size = g_utf8_strlen(text, -1);
+        if (size < (glong) length)
+            length = (size_t) size;
         return g_utf8_offset_to_pointer (text, length) - text;
-    else
+    } else
     {
         int result;
         GString *buffer;
 
         buffer = g_string_new (text);
         str_utf8_fix_string (buffer->str);
+        /* Limit index by string size. */
+        size = g_utf8_strlen(buffer->str, -1);
+        if (size < (glong) length)
+            length = (size_t) size;
         result = g_utf8_offset_to_pointer (buffer->str, length) - buffer->str;
         g_string_free (buffer, TRUE);
         return result;
diff --git a/lib/widget/input.c b/lib/widget/input.c
index 625b394a9..d42623741 100644
--- a/lib/widget/input.c
+++ b/lib/widget/input.c
@@ -425,25 +425,37 @@ backward_word (WInput * in)
 {
     const char *p;
 
+    /* p is limited by strlen. */
     p = in->buffer + str_offset_to_pos (in->buffer, in->point);
 
-    while (p != in->buffer)
+    while (p && p != in->buffer)
     {
         const char *p_tmp;
 
         p_tmp = p;
-        str_cprev_char (&p);
-        if (!str_isspace (p) && !str_ispunct (p))
+        str_cprev_char (&p, in->buffer);
+        if (p)
         {
-            p = p_tmp;
-            break;
+            /*
+             * If preceding char isn't a word boundary (↔ we're ·in· a word), then undo last move and
+             * break from loop.
+             */
+
+            if (!str_isspace (p) && !str_ispunct (p))
+            {
+                p = p_tmp;
+                break;
+            }
+            in->point--;
         }
-        in->point--;
     }
-    while (p != in->buffer)
+
+    /* Further skip the ·word· chars, if not outside the string. */
+    while (p && p != in->buffer)
     {
-        str_cprev_char (&p);
-        if (str_isspace (p) || str_ispunct (p))
+        str_cprev_char (&p, in->buffer);
+        /* Stop when a word boundary char is detected or when the string ends. */
+        if (!p || str_isspace (p) || str_ispunct (p))
             break;
 
         in->point--;
diff --git a/lib/widget/input_complete.c b/lib/widget/input_complete.c
index 59a994d62..830b24551 100644
--- a/lib/widget/input_complete.c
+++ b/lib/widget/input_complete.c
@@ -843,31 +843,35 @@ try_complete_commands_prepare (try_complete_automation_state_t * state, char *te
         ti = text;
     else
     {
-        ti = str_get_prev_char (&text[*lc_start]);
+        ti = str_get_prev_char (&text[*lc_start], text);
         while (ti > text && whitespace (ti[0]))
-            str_prev_char (&ti);
+            str_prev_char (&ti, text);
     }
 
-    if (ti == text)
+    if (!ti) {
         state->in_command_position++;
-    else if (strchr (command_separator_chars, ti[0]) != NULL)
+        ti = text;
+    }
+
+    /* Is there any more preceding text, and there's a command separator? */
+    if (ti != text && strchr (command_separator_chars, ti[0]) != NULL)
     {
+        int this_char, prev_char = '\0';
+        char *prev_char_p;
+
+        /* Initial assumption that we're at command. */
         state->in_command_position++;
-        if (ti != text)
-        {
-            int this_char, prev_char;
 
-            /* Handle the two character tokens '>&', '<&', and '>|'.
-               We are not in a command position after one of these. */
-            this_char = ti[0];
-            prev_char = str_get_prev_char (ti)[0];
+        /* Handle the two character tokens '>&', '<&', and '>|'.
+           We are not in a command position after one of these. */
+        this_char = ti[0];
+        prev_char_p = str_get_prev_char (ti, text);
+        if (prev_char_p)
+            prev_char = prev_char_p[0];
 
-            /* Quoted */
-            if ((this_char == '&' && (prev_char == '<' || prev_char == '>'))
-                || (this_char == '|' && prev_char == '>') || (ti != text
-                                                              && str_get_prev_char (ti)[0] == '\\'))
-                state->in_command_position = 0;
-        }
+        if ((this_char == '&' && (strchr("<>",prev_char)))
+            || (this_char == '|' && prev_char == '>') || prev_char == '\\')
+            state->in_command_position = 0;
     }
 }
 
@@ -1043,7 +1047,9 @@ complete_callback (Widget * w, Widget * sender, widget_msg_t msg, int parm, void
             /* Refill the list box and start again */
             else if (end == min_end)
             {
-                end = str_get_prev_char (&input->buffer[end]) - input->buffer;
+                end = str_get_prev_char (&input->buffer[end], input->buffer) - input->buffer;
+                if (end < 0)
+                    end = 0;
                 input_handle_char (input, parm);
                 h->ret_value = B_USER;
                 dlg_stop (h);
@@ -1054,7 +1060,10 @@ complete_callback (Widget * w, Widget * sender, widget_msg_t msg, int parm, void
                 int i;
                 GList *e;
 
-                new_end = str_get_prev_char (&input->buffer[end]) - input->buffer;
+                new_end = str_get_prev_char (&input->buffer[end], input->buffer) - input->buffer; 
+                /* The buffer is empty (no previous char available)? */
+                if (new_end < 0)
+                    new_end = 0;
 
                 for (i = 0, e = listbox_get_first_link (LISTBOX (g->current->data));
                      e != NULL; i++, e = g_list_next (e))
@@ -1401,6 +1410,7 @@ complete_engine_fill_completions (WInput * in)
 {
     char *s;
     const char *word_separators;
+    gboolean separator_found = FALSE;
 
     word_separators = (in->completion_flags & INPUT_COMPLETE_SHELL_ESC) ? " \t;|<>" : "\t;|<>";
 
@@ -1416,16 +1426,26 @@ complete_engine_fill_completions (WInput * in)
             str_next_char (&s);
     }
 
-    for (; s >= in->buffer; str_prev_char (&s))
+    for (;s; str_prev_char (&s, in->buffer))
     {
         start = s - in->buffer;
         if (strchr (word_separators, *s) != NULL && !strutils_is_char_escaped (in->buffer, s))
+        {
+            separator_found = TRUE;
             break;
+        }
     }
 
+    /* Note: str_prev_char() returns NULL if no preceding character fitting within string found. */
+    if (s < in->buffer)
+        s = in->buffer;
+
     if (start < end)
     {
-        str_next_char (&s);
+        if (separator_found)
+            str_next_char (&s);
+        if (s > in->buffer + end)
+            s = in->buffer + end;
         start = s - in->buffer;
     }
 
diff --git a/src/help.c b/src/help.c
index f5922f086..4b52f54e7 100644
--- a/src/help.c
+++ b/src/help.c
@@ -229,7 +229,7 @@ move_backward2 (const char *c, int lines)
     int line;
 
     currentpoint = c;
-    for (line = 0, p = currentpoint; (*p != '\0') && ((int) (p - fdata) >= 0); str_cprev_char (&p))
+    for (line = 0, p = currentpoint; p && (*p != '\0') && ((int) (p - fdata) >= 0); str_cprev_char (&p, fdata))
     {
         if (*p == CHAR_NODE_END)
         {
diff --git a/src/usermenu.c b/src/usermenu.c
index 698244220..9246120d8 100644
--- a/src/usermenu.c
+++ b/src/usermenu.c
@@ -133,7 +133,7 @@ check_patterns (char *p)
    point after argument. */
 
 static char *
-extract_arg (char *p, char *arg, int size)
+extract_arg (char *p, char *arg, const char *begin, int size)
 {
     while (*p != '\0' && whiteness (*p))
         p++;
@@ -152,8 +152,10 @@ extract_arg (char *p, char *arg, int size)
         p = np;
     }
     *arg = '\0';
-    if (*p == '\0' || *p == '\n')
-        str_prev_char (&p);
+    if (p && (*p == '\0' || *p == '\n'))
+        str_prev_char (&p, begin);
+    if (!p)
+        p = (char *)begin;
     return p;
 }
 
@@ -215,13 +217,13 @@ test_type (WPanel * panel, char *arg)
    p. Returns the point after condition. */
 
 static char *
-test_condition (const WEdit * edit_widget, char *p, gboolean * condition)
+test_condition (const WEdit * edit_widget, char *p, const char *begin, gboolean * condition)
 {
     char arg[256];
     const mc_search_type_t search_type = easy_patterns ? MC_SEARCH_T_GLOB : MC_SEARCH_T_REGEX;
 
     /* Handle one condition */
-    for (; *p != '\n' && *p != '&' && *p != '|'; p++)
+    for (; p && *p != '\n' && *p != '&' && *p != '|'; p++)
     {
         WPanel *panel = NULL;
 
@@ -238,12 +240,12 @@ test_condition (const WEdit * edit_widget, char *p, gboolean * condition)
         switch (*p++)
         {
         case '!':
-            p = test_condition (edit_widget, p, condition);
+            p = test_condition (edit_widget, p, begin, condition);
             *condition = !*condition;
-            str_prev_char (&p);
+            str_prev_char (&p, begin);
             break;
         case 'f':              /* file name pattern */
-            p = extract_arg (p, arg, sizeof (arg));
+            p = extract_arg (p, arg, begin, sizeof (arg));
 #ifdef USE_INTERNAL_EDIT
             if (edit_widget != NULL)
             {
@@ -267,27 +269,27 @@ test_condition (const WEdit * edit_widget, char *p, gboolean * condition)
                 syntax_type = edit_get_syntax_type (edit_widget);
                 if (syntax_type != NULL)
                 {
-                    p = extract_arg (p, arg, sizeof (arg));
+                    p = extract_arg (p, arg, begin, sizeof (arg));
                     *condition = mc_search (arg, DEFAULT_CHARSET, syntax_type, MC_SEARCH_T_NORMAL);
                 }
             }
 #endif
             break;
         case 'd':
-            p = extract_arg (p, arg, sizeof (arg));
+            p = extract_arg (p, arg, begin, sizeof (arg));
             *condition = panel != NULL
                 && mc_search (arg, DEFAULT_CHARSET, vfs_path_as_str (panel->cwd_vpath),
                               search_type);
             break;
         case 't':
-            p = extract_arg (p, arg, sizeof (arg));
+            p = extract_arg (p, arg, begin, sizeof (arg));
             *condition = panel != NULL && test_type (panel, arg);
             break;
         case 'x':              /* executable */
             {
                 struct stat status;
 
-                p = extract_arg (p, arg, sizeof (arg));
+                p = extract_arg (p, arg, begin, sizeof (arg));
                 *condition = stat (arg, &status) == 0 && is_exe (status.st_mode);
                 break;
             }
@@ -356,12 +358,12 @@ debug_out (char *start, char *end, gboolean condition)
    the point just before the end of line. */
 
 static char *
-test_line (const WEdit * edit_widget, char *p, gboolean * result)
+test_line (const WEdit * edit_widget, char *p, const char *begin, gboolean * result)
 {
     char operator;
 
     /* Repeat till end of line */
-    while (*p != '\0' && *p != '\n')
+    while (p && *p != '\0' && *p != '\n')
     {
         char *debug_start, *debug_end;
         gboolean condition = TRUE;
@@ -384,7 +386,7 @@ test_line (const WEdit * edit_widget, char *p, gboolean * result)
             break;
 
         debug_start = p;
-        p = test_condition (edit_widget, p, &condition);
+        p = test_condition (edit_widget, p, begin, &condition);
         debug_end = p;
         /* Add one debug statement */
         debug_out (debug_start, debug_end, condition);
@@ -413,8 +415,10 @@ test_line (const WEdit * edit_widget, char *p, gboolean * result)
     /* Report debug message */
     debug_out (NULL, NULL, TRUE);
 
-    if (*p == '\0' || *p == '\n')
-        str_prev_char (&p);
+    if (p && (*p == '\0' || *p == '\n'))
+        str_prev_char (&p, begin);
+    if (!p)
+        p = (char *)begin;
     return p;
 }
 
@@ -1037,14 +1041,14 @@ user_menu_cmd (const WEdit * edit_widget, const char *menu_file, int selected_en
                 if (*(p + 1) == '=')
                 {
                     /* Combined adding and default */
-                    p = test_line (edit_widget, p + 1, &accept_entry);
+                    p = test_line (edit_widget, p + 1, data, &accept_entry);
                     if (selected == 0 && accept_entry)
                         selected = menu_lines;
                 }
                 else
                 {
                     /* A condition for adding the entry */
-                    p = test_line (edit_widget, p, &accept_entry);
+                    p = test_line (edit_widget, p, data, &accept_entry);
                 }
                 break;
 
@@ -1052,7 +1056,7 @@ user_menu_cmd (const WEdit * edit_widget, const char *menu_file, int selected_en
                 if (*(p + 1) == '+')
                 {
                     /* Combined adding and default */
-                    p = test_line (edit_widget, p + 1, &accept_entry);
+                    p = test_line (edit_widget, p + 1, data, &accept_entry);
                     if (selected == 0 && accept_entry)
                         selected = menu_lines;
                 }
@@ -1060,7 +1064,7 @@ user_menu_cmd (const WEdit * edit_widget, const char *menu_file, int selected_en
                 {
                     /* A condition for making the entry default */
                     i = 1;
-                    p = test_line (edit_widget, p, &i);
+                    p = test_line (edit_widget, p, data, &i);
                     if (selected == 0 && i != 0)
                         selected = menu_lines;
                 }
-- 
2.28.0


From 24ad244ee52ed76b609a1c3236edc3da73439ee1 Mon Sep 17 00:00:00 2001
From: Vit Rosin <vit_r@list.ru>
Date: Thu, 4 Mar 2010 11:34:56 +0000
Subject: [PATCH]  edit.c replacing g_string_sprintf by g_strdup_printf

---
 src/editor/edit.c |   32 ++++++++++++++------------------
 1 files changed, 14 insertions(+), 18 deletions(-)

diff --git a/src/editor/edit.c b/src/editor/edit.c
index b88e294..c805737 100644
--- a/src/editor/edit.c
+++ b/src/editor/edit.c
@@ -296,10 +296,11 @@ edit_load_file_fast (WEdit *edit, const char *filename)
     buf2 = edit->curs2 >> S_EDIT_BUF_SIZE;
     edit->utf8 = 0;
     if ((file = mc_open (filename, O_RDONLY | O_BINARY)) == -1) {
-	GString *errmsg = g_string_new(NULL);
-	g_string_sprintf(errmsg, _(" Cannot open %s for reading "), filename);
-	edit_error_dialog (_("Error"), get_sys_error (errmsg->str));
-	g_string_free (errmsg, TRUE);
+	gchar *errmsg;
+
+	errmsg = g_strdup_printf (_(" Cannot open %s for reading "), filename);
+	edit_error_dialog (_("Error"), errmsg);
+	g_free (errmsg);
 	return 1;
     }
 
@@ -555,7 +556,7 @@ static int
 check_file_access (WEdit *edit, const char *filename, struct stat *st)
 {
     int file;
-    GString *errmsg = (GString *) 0;
+    gchar *errmsg = NULL;
 
     /* Try opening an existing file */
     file = mc_open (filename, O_NONBLOCK | O_RDONLY | O_BINARY, 0666);
@@ -570,8 +571,7 @@ check_file_access (WEdit *edit, const char *filename, struct stat *st)
 		     O_NONBLOCK | O_RDONLY | O_BINARY | O_CREAT | O_EXCL,
 		     0666);
 	if (file < 0) {
-	    g_string_sprintf (errmsg = g_string_new (NULL),
-		_(" Cannot open %s for reading "), filename);
+	    errmsg = g_strdup_printf (_(" Cannot open %s for reading "), filename);
 	    goto cleanup;
 	} else {
 	    /* New file, delete it if it's not modified or saved */
@@ -581,15 +581,13 @@ check_file_access (WEdit *edit, const char *filename, struct stat *st)
 
     /* Check what we have opened */
     if (mc_fstat (file, st) < 0) {
-	g_string_sprintf (errmsg = g_string_new (NULL),
-	    _(" Cannot get size/permissions for %s "), filename);
+        errmsg = g_strdup_printf (_(" Cannot get size/permissions for %s "), filename);
 	goto cleanup;
     }
 
     /* We want to open regular files only */
     if (!S_ISREG (st->st_mode)) {
-	g_string_sprintf (errmsg = g_string_new (NULL),
-	    _(" %s is not a regular file "), filename);
+        errmsg = g_strdup_printf (_(" %s is not a regular file "), filename);
 	goto cleanup;
     }
 
@@ -601,16 +599,14 @@ check_file_access (WEdit *edit, const char *filename, struct stat *st)
 	edit->delete_file = 0;
     }
 
-    if (st->st_size >= SIZE_LIMIT) {
-        g_string_sprintf (errmsg = g_string_new (NULL),
-	    _(" File %s is too large "), filename);
-    }
+    if (st->st_size >= SIZE_LIMIT)
+        errmsg = g_strdup_printf (_(" File %s is too large "), filename);
 
 cleanup:
     (void) mc_close (file);
-    if (errmsg) {
-	edit_error_dialog (_("Error"), errmsg->str);
-	g_string_free (errmsg, TRUE);
+    if (errmsg != NULL) {
+	edit_error_dialog (_("Error"), errmsg);
+	g_free (errmsg);
 	return 1;
     }
     return 0;
-- 
1.6.4


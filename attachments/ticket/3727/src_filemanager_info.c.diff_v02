--- mc-github/src/filemanager/info.c_orig	2016-11-17 13:46:14.597732771 -0500
+++ mc-github/src/filemanager/info.c	2016-11-18 04:42:52.913005798 -0500
@@ -104,6 +104,8 @@
 info_show_info (WInfo * info)
 {
     Widget *w = WIDGET (info);
+    char *fname;
+    size_t fname_len = 0;
     static int i18n_adjust = 0;
     static const char *file_label;
     GString *buff;
@@ -154,8 +156,8 @@
 
     default:
 
-    case 16:
-        widget_move (w, 16, 3);
+    case 18:
+        widget_move (w, 18, 3);
         if ((myfs_stats.nfree == 0 && myfs_stats.nodes == 0) ||
             (myfs_stats.nfree == (uintmax_t) (-1) && myfs_stats.nodes == (uintmax_t) (-1)))
             tty_print_string (_("No node information"));
@@ -169,9 +171,8 @@
                         myfs_stats.nfree, myfs_stats.nodes,
                         myfs_stats.nodes == 0 ? 0 :
                         (int) (100 * (long double) myfs_stats.nfree / myfs_stats.nodes));
-
-    case 15:
-        widget_move (w, 15, 3);
+    case 17:
+        widget_move (w, 17, 3);
         if (myfs_stats.avail == 0 && myfs_stats.total == 0)
             tty_print_string (_("No space information"));
         else
@@ -184,26 +185,67 @@
                         myfs_stats.total == 0 ? 0 :
                         (int) (100 * (long double) myfs_stats.avail / myfs_stats.total));
         }
-
-    case 14:
-        widget_move (w, 14, 3);
+    case 16:
+        widget_move (w, 16, 3);
         tty_printf (_("Type:       %s"),
                     myfs_stats.typename ? myfs_stats.typename : _("non-local vfs"));
         if (myfs_stats.type != 0xffff && myfs_stats.type != -1)
             tty_printf (" (%Xh)", myfs_stats.type);
-
-    case 13:
-        widget_move (w, 13, 3);
+    case 15:
+        widget_move (w, 15, 3);
         str_printf (buff, _("Device:     %s"),
                     str_trunc (myfs_stats.device, w->cols - i18n_adjust));
         tty_print_string (buff->str);
         g_string_set_size (buff, 0);
-    case 12:
-        widget_move (w, 12, 3);
+    case 14:
+        widget_move (w, 14, 2);
         str_printf (buff, _("Filesystem: %s"),
                     str_trunc (myfs_stats.mpoint, w->cols - i18n_adjust));
         tty_print_string (buff->str);
         g_string_set_size (buff, 0);
+    case 13:
+        /* Placeholder comment for blank line */
+    case 12:
+        {
+            /* TODO:
+             *   error handling: malloc, popen, fgets*2
+             *   handle long lines exceeding panel width
+             */
+            FILE *command_stream;
+            char *command;
+            char *command_pos;
+            /* command_substr = "file -b -- '';file -bi -- ''" */
+            const size_t command_substr_len = 28;
+            /* size of command_outputs arbitrarily / staticly set */
+#define CMD_OUT_LEN 1024
+            char command_output_1[CMD_OUT_LEN];
+            char command_output_2[CMD_OUT_LEN];
+             /* data sink to avoid build errors. Do not use for logic */
+            char *sink;
+
+            fname = current_panel->dir.list[current_panel->selected].fname;
+            fname_len = strlen (fname);
+            command = malloc ((fname_len * 2) + command_substr_len + 1);
+            if (command == NULL)
+                goto malloc_error_case_17;
+            command_pos = stpcpy (command, "file -b -- '");
+            command_pos = stpcpy (command_pos, fname);
+            command_pos = stpcpy (command_pos, "';file -bi -- '");
+            command_pos = stpcpy (command_pos, fname);
+            command_pos = stpcpy (command_pos, "'");
+            command_stream = popen (command, "r");
+            sink = fgets (command_output_1, CMD_OUT_LEN, command_stream);
+            command_output_1[strlen (command_output_1) - 1] = '\0';
+            sink = fgets (command_output_2, CMD_OUT_LEN, command_stream);
+            command_output_2[strlen (command_output_2) - 1] = '\0';
+            widget_move (w, 12, 3);
+            str_printf (buff, _("Mime Type:  %s (%s)"), command_output_1, command_output_2);
+            tty_print_string (buff->str);
+            g_string_set_size (buff, 0);
+            pclose (command_stream);
+            free(command);
+        }
+      malloc_error_case_17:    /* Yes, I also hate gotos, but this is a fall-through switch */
     case 11:
         widget_move (w, 11, 3);
         str_printf (buff, _("Accessed:   %s"), file_date (st.st_atime));
@@ -222,7 +264,6 @@
         str_printf (buff, _("Changed:    %s"), file_date (st.st_ctime));
         tty_print_string (buff->str);
         g_string_set_size (buff, 0);
-
     case 8:
         widget_move (w, 8, 3);
 #ifdef HAVE_STRUCT_STAT_ST_RDEV
@@ -240,33 +281,25 @@
                                   (unsigned long) st.st_blocks), (unsigned long) st.st_blocks);
 #endif
         }
-
     case 7:
         widget_move (w, 7, 3);
         tty_printf (_("Owner:      %s/%s"), get_owner (st.st_uid), get_group (st.st_gid));
-
     case 6:
         widget_move (w, 6, 3);
         tty_printf (_("Links:      %d"), (int) st.st_nlink);
-
     case 5:
         widget_move (w, 5, 3);
         tty_printf (_("Mode:       %s (%04o)"),
                     string_perm (st.st_mode), (unsigned) st.st_mode & 07777);
-
     case 4:
         widget_move (w, 4, 3);
         tty_printf (_("Location:   %Xh:%Xh"), (int) st.st_dev, (int) st.st_ino);
-
     case 3:
-        {
-            const char *fname;
-
-            widget_move (w, 3, 2);
-            fname = current_panel->dir.list[current_panel->selected].fname;
-            str_printf (buff, file_label, str_trunc (fname, w->cols - i18n_adjust));
-            tty_print_string (buff->str);
-        }
+        widget_move (w, 3, 2);
+        /* fname assignment possibly redundant now; see case 17, above */
+        fname = current_panel->dir.list[current_panel->selected].fname;
+        str_printf (buff, file_label, str_trunc (fname, w->cols - i18n_adjust));
+        tty_print_string (buff->str);
 
     case 2:
     case 1:

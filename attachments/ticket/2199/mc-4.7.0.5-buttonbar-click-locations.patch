diff -ur mc-4.7.0.5.orig/src/widget.c mc-4.7.0.5/src/widget.c
--- mc-4.7.0.5.orig/src/widget.c	2010-05-15 21:09:06.000000000 +0200
+++ mc-4.7.0.5/src/widget.c	2010-05-15 21:04:47.000000000 +0200
@@ -2663,12 +2663,63 @@
     return ret;
 }
 
-/* calculate width of one button, width is never lesser than 7 */
+/* calculate positions of buttons; width is never less than 7 */
+static void
+buttonbar_init_button_positions (WButtonBar *bb)
+{
+    int i;
+    int pos = 0;
+    int div, mod;
+    if (COLS < BUTTONBAR_LABELS_NUM * 7) {
+      for (i = 0; i < BUTTONBAR_LABELS_NUM; i++) {
+        if (pos + 7 <= COLS) {
+          pos += 7;
+        }
+        bb->labels[i].end_coord = pos;
+      }
+    } else {
+      /* Distribute the extra width in a way that the middle vertical line
+         (between F5 and F6) aligns with the two panels. The extra width
+         is distributed in this order: F10, F5, F9, F4, ..., F6, F1. */
+      div = COLS / BUTTONBAR_LABELS_NUM;
+      mod = COLS % BUTTONBAR_LABELS_NUM;
+      for (i = 0; i < BUTTONBAR_LABELS_NUM / 2; i++) {
+        pos += div;
+        if (BUTTONBAR_LABELS_NUM / 2 - 1 - i < mod / 2) {
+          pos++;
+        }
+        bb->labels[i].end_coord = pos;
+      }
+      for (; i < BUTTONBAR_LABELS_NUM; i++) {
+        pos += div;
+        if (BUTTONBAR_LABELS_NUM - 1 - i < (mod + 1) / 2) {
+          pos++;
+        }
+        bb->labels[i].end_coord = pos;
+      }
+    }
+}
+
+/* return width of one button */
 static int
-buttonbat_get_button_width (void)
+buttonbar_get_button_width (const WButtonBar *bb, int i)
 {
-    int result = COLS / BUTTONBAR_LABELS_NUM;
-    return (result >= 7) ? result : 7;
+    if (i == 0) {
+      return bb->labels[0].end_coord;
+    }
+    return bb->labels[i].end_coord - bb->labels[i - 1].end_coord;
+}
+
+static int
+buttonbar_get_button_by_x_coord (const WButtonBar *bb, int x)
+{
+    int i;
+    for (i = 0; i < BUTTONBAR_LABELS_NUM; i++) {
+      if (bb->labels[i].end_coord > x) {
+        return i;
+      }
+    }
+    return -1;
 }
 
 static cb_ret_t
@@ -2690,28 +2741,23 @@
 
     case WIDGET_DRAW:
 	if (bb->visible) {
-	    int offset = 0;
-	    int count_free_positions;
+	    int width;
 
+	    buttonbar_init_button_positions (bb);
 	    widget_move (&bb->widget, 0, 0);
 	    tty_setcolor (DEFAULT_COLOR);
-	    bb->btn_width = buttonbat_get_button_width ();
 	    tty_printf ("%-*s", bb->widget.cols, "");
-	    count_free_positions = COLS - bb->btn_width * BUTTONBAR_LABELS_NUM;
+	    widget_move (&bb->widget, 0, 0);
 
-	    for (i = 0; i < COLS / bb->btn_width && i < BUTTONBAR_LABELS_NUM; i++) {
-		widget_move (&bb->widget, 0, (i * bb->btn_width) + offset);
+	    for (i = 0; i < BUTTONBAR_LABELS_NUM && (width = buttonbar_get_button_width(bb, i)) > 0; i++) {
 		tty_setcolor (BUTTONBAR_HOTKEY_COLOR);
 		tty_printf ("%2d", i + 1);
 		tty_setcolor (BUTTONBAR_BUTTON_COLOR);
 		text = (bb->labels[i].text != NULL) ? bb->labels[i].text : "";
 		tty_print_string (str_fit_to_term (
 			text,
-			bb->btn_width - 2 + (int)(offset < count_free_positions),
+			width - 2,
 			J_LEFT_FIT));
-
-		if (count_free_positions != 0 && offset < count_free_positions)
-		    offset++;
 	    }
 	}
 	return MSG_HANDLED;
@@ -2736,8 +2782,8 @@
 	return MOU_NORMAL;
     if (event->y == 2)
 	return MOU_NORMAL;
-    button = (event->x - 1) * BUTTONBAR_LABELS_NUM / COLS;
-    if (button < BUTTONBAR_LABELS_NUM)
+    button = buttonbar_get_button_by_x_coord (bb, event->x - 1);
+    if (button >= 0)
 	buttonbar_call (bb, button);
     return MOU_NORMAL;
 }
@@ -2755,7 +2801,6 @@
     bb->visible = visible;
     widget_want_hotkey (bb->widget, 1);
     widget_want_cursor (bb->widget, 0);
-    bb->btn_width = buttonbat_get_button_width ();
 
     return bb;
 }
diff -ur mc-4.7.0.5.orig/src/widget.h mc-4.7.0.5/src/widget.h
--- mc-4.7.0.5.orig/src/widget.h	2010-05-15 21:09:06.000000000 +0200
+++ mc-4.7.0.5/src/widget.h	2010-05-15 20:57:08.000000000 +0200
@@ -165,11 +165,11 @@
 typedef struct WButtonBar {
     Widget widget;
     gboolean visible;		/* Is it visible? */
-    int btn_width;		/* width of one button */
     struct {
 	char *text;
 	unsigned long command;
 	Widget *receiver;
+	int end_coord;		/* cumulative width of buttons so far */
     } labels [BUTTONBAR_LABELS_NUM];
 } WButtonBar;
 

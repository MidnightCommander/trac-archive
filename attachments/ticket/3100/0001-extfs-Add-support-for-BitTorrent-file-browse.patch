From 8b5baaf585f82d44005187b36211b2f75d3a2c02 Mon Sep 17 00:00:00 2001
From: Artem Senichev <artemsen@gmail.com>
Date: Thu, 14 Mar 2019 12:28:22 +0300
Subject: [PATCH] extfs: Add support for BitTorrent file browse

Signed-off-by: Artem Senichev <artemsen@gmail.com>
---
 misc/mc.ext.in                    |   1 +
 src/vfs/extfs/helpers/Makefile.am |   2 +-
 src/vfs/extfs/helpers/torrent     | 216 ++++++++++++++++++++++++++++++
 3 files changed, 218 insertions(+), 1 deletion(-)
 create mode 100755 src/vfs/extfs/helpers/torrent

diff --git a/misc/mc.ext.in b/misc/mc.ext.in
index 71cc003e6..05290cea7 100644
--- a/misc/mc.ext.in
+++ b/misc/mc.ext.in
@@ -718,6 +718,7 @@ shell/i/.lyx
 
 # torrent
 shell/i/.torrent
+	Open=%cd %p/torrent://
 	View=%view{ascii} @EXTHELPERSDIR@/misc.sh view torrent
 
 
diff --git a/src/vfs/extfs/helpers/Makefile.am b/src/vfs/extfs/helpers/Makefile.am
index 06ea7898d..5bd5e5c60 100644
--- a/src/vfs/extfs/helpers/Makefile.am
+++ b/src/vfs/extfs/helpers/Makefile.am
@@ -6,7 +6,7 @@ EXTFSCONFFILES = sfs.ini
 EXTFS_MISC  = README README.extfs
 
 # Scripts hat don't need adaptation to the local system
-EXTFS_CONST = bpp changesetfs gitfs+ patchsetfs rpm trpm u7z
+EXTFS_CONST = bpp changesetfs gitfs+ patchsetfs rpm torrent trpm u7z
 
 # Scripts that need adaptation to the local system - source files
 EXTFS_IN    = 			\
diff --git a/src/vfs/extfs/helpers/torrent b/src/vfs/extfs/helpers/torrent
new file mode 100755
index 000000000..94554c539
--- /dev/null
+++ b/src/vfs/extfs/helpers/torrent
@@ -0,0 +1,216 @@
+#!/usr/bin/env python3
+
+# Midnight Commander - extFS extension to explore BitTorrent files
+#
+# Copyright (C) 2019
+# The Free Software Foundation, Inc.
+#
+# Written by:
+#  Artem Senichev <artemsen@gmail.com>, 2019
+#
+# This file is part of the Midnight Commander.
+#
+# The Midnight Commander is free software: you can redistribute it
+# and/or modify it under the terms of the GNU General Public License as
+# published by the Free Software Foundation, either version 3 of the License,
+# or (at your option) any later version.
+#
+# The Midnight Commander is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+import os
+import sys
+import time
+import json
+
+
+class BtDecoder(object):
+    """
+    Decoder for BitTorrent files.
+    """
+
+    # Predefined node names
+    INFO_DICT = 'info'
+    FILES_DICT = 'files'
+    FILE_PATH = 'path'
+    FILE_SIZE = 'length'
+    TORR_NAME = 'name'
+    PIECES_NODE = 'pieces'
+    CREATION_DATE = 'creation date'
+
+    class FormatError(Exception):
+        """
+        BitTorrent file format exception.
+        """
+        def __init__(self, msg, offset=-1, dump=None):
+            self.msg = msg
+            self.offset = offset
+            self.dump = dump
+
+    def __init__(self, file):
+        """
+        Constructor.
+        :param file: BitTorrent file to open (*.torrent)
+        """
+        with open(file, 'rb') as f:
+            self._data = f.read()
+        self._offset = 0
+        self._root = self._decode()
+
+    def file_list(self):
+        """
+        Print file list in format compatible with Midnight Commander.
+        """
+        if BtDecoder.INFO_DICT not in self._root:
+            raise BtDecoder.FormatError('Info block not found')
+        info_dict = self._root[BtDecoder.INFO_DICT]
+        # Build the file list
+        file_list = []
+        if BtDecoder.FILES_DICT in info_dict:
+            files_dict = info_dict[BtDecoder.FILES_DICT]
+            for file in files_dict:
+                if BtDecoder.FILE_PATH in file:
+                    path = '/'.join(file[BtDecoder.FILE_PATH])
+                    file_list.append((path, file.get(BtDecoder.FILE_SIZE, 0)))
+        elif BtDecoder.TORR_NAME in info_dict:
+            file_list.append((info_dict[BtDecoder.TORR_NAME], info_dict.get(BtDecoder.FILE_SIZE, 0)))
+
+        # Use torrent creation date as file time
+        if BtDecoder.CREATION_DATE in self._root:
+            ts = time.localtime(self._root[BtDecoder.CREATION_DATE])
+        else:
+            ts = time.localtime()
+        ft = '{:02}-{:02}-{:04} {:02}:{:02}:{:02}'.format(ts.tm_mon, ts.tm_mday, ts.tm_year,
+                                                          ts.tm_hour, ts.tm_min, ts.tm_sec)
+        # Use current UID/GID as file owner
+        uid = os.getuid()
+        gid = os.getgid()
+
+        for path, size in file_list:
+            print('-rw-r--r-- 1 {:3} {:3} {} {} {}'.format(uid, gid, size, ft, path))
+
+    def dump(self):
+        """
+        Print json dump of torrent file content.
+        """
+        print(json.dumps(self._root, indent=2))
+
+    def _decode(self):
+        """
+        Decode next node from buffer.
+        :return: node instance
+        """
+        type_id = self._data[self._offset]
+        if ord('0') <= type_id <= ord('9'):
+            node = self._decode_string()
+        elif type_id == ord('i'):
+            node = self._decode_integer()
+        elif type_id == ord('l'):
+            node = self._decode_list()
+        elif type_id == ord('d'):
+            node = self._decode_dict()
+        else:
+            raise BtDecoder.FormatError('Invalid node type', self._offset,
+                                        self._data[self._offset:self._offset + 8])
+        return node
+
+    def _decode_string(self):
+        """
+        Node decoder - text string.
+        """
+        try:
+            delimiter = self._data.index(ord(':'), self._offset)
+            length = int(self._data[self._offset:delimiter].decode('utf8', 'ignore'))
+            node = self._data[delimiter + 1:delimiter + 1 + length].decode('utf8', 'ignore')
+            self._offset = delimiter + length + 1
+            return node
+        except Exception:
+            raise BtDecoder.FormatError('Unable to decode string node', self._offset,
+                                        self._data[self._offset:self._offset + 8])
+
+    def _decode_integer(self):
+        """
+        Node decoder - integer value.
+        """
+        try:
+            self._offset += 1
+            delimiter = self._data.index(ord('e'), self._offset)
+            node = int(self._data[self._offset:delimiter].decode('utf8', 'ignore'))
+            self._offset = delimiter + 1
+            return node
+        except Exception:
+            raise BtDecoder.FormatError('Unable to decode integer node', self._offset,
+                                        self._data[self._offset:self._offset + 8])
+
+    def _decode_list(self):
+        """
+        Node decoder - list.
+        """
+        self._offset += 1
+        node = []
+        try:
+            while self._offset < len(self._data) and self._data[self._offset] != ord('e'):
+                node.append(self._decode())
+            self._offset += 1
+        except Exception:
+            # Stop further processing
+            self._offset = len(self._data)
+        return node
+
+    def _decode_dict(self):
+        """
+        Node decoder - dictionary.
+        """
+        self._offset += 1
+        node = {}
+        try:
+            while self._offset < len(self._data) and self._data[self._offset] != ord('e'):
+                key = self._decode_string()
+                val = self._decode()
+                if key == BtDecoder.PIECES_NODE:
+                    val = '<Binary data>'
+                node[key] = val
+            self._offset += 1
+        except Exception:
+            # Stop further processing
+            self._offset = len(self._data)
+        return node
+
+
+def main():
+    """
+    Main entry point.
+    :return: exit code, 0 if operation was completed successfully
+    """
+    if len(sys.argv) < 3 or '-h' in sys.argv or '--help' in sys.argv:
+        print('Use: {} list|view FILE'.format(sys.argv[0]))
+        return 1
+    try:
+        if sys.argv[1] == 'list':
+            BtDecoder(sys.argv[2]).file_list()
+        elif sys.argv[1] == 'view':
+            BtDecoder(sys.argv[2]).dump()
+        else:
+            return 1
+        return 0
+    except BtDecoder.FormatError as e:
+        print('Invalid torrent file format!', file=sys.stderr)
+        print(e.msg, file=sys.stderr)
+        if e.offset >= 0:
+            msg = 'Offset: 0x{:02x}'.format(e.offset)
+            if e.dump:
+                msg += ' ' + ''.join(' {:02x}'.format(x) for x in e.dump)
+            print(msg, file=sys.stderr)
+        return 1
+    except Exception as e:
+        print(str(e), file=sys.stderr)
+        return 1
+
+
+if __name__ == '__main__':
+    exit(main())
-- 
2.20.1


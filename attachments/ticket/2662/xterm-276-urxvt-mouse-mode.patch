diff -ur xterm-276.orig/button.c xterm-276/button.c
--- xterm-276.orig/button.c	2011-08-19 02:09:26.000000000 +0200
+++ xterm-276/button.c	2011-11-07 09:25:02.000000000 +0100
@@ -176,7 +176,9 @@
 static unsigned
 EmitMousePosition(TScreen * screen, Char line[], unsigned count, int value)
 {
-    int mouse_limit = (screen->ext_mode_mouse
+    int mouse_limit = (screen->urxvt_ext_mode_mouse
+		       ? -1
+		       : screen->ext_mode_mouse
 		       ? EXT_MOUSE_LIMIT
 		       : MOUSE_LIMIT);
 
@@ -192,6 +194,8 @@
      */
     if (value == mouse_limit) {
 	line[count++] = CharOf(0);
+    } else if (screen->urxvt_ext_mode_mouse) {
+	count += sprintf(line + count, "%d", value + 1);
     } else if (!screen->ext_mode_mouse || value < EXT_MOUSE_START) {
 	line[count++] = CharOf(' ' + value + 1);
     } else {
@@ -202,6 +206,15 @@
     return count;
 }
 
+static unsigned
+EmitMousePositionSeparator(TScreen * screen, Char line[], unsigned count)
+{
+    if (screen->urxvt_ext_mode_mouse) {
+	line[count++] = ';';
+    }
+    return count;
+}
+
 Bool
 SendMousePosition(XtermWidget xw, XEvent * event)
 {
@@ -2242,7 +2255,7 @@
     CELL cell;
     unsigned count;
     TScreen *screen = TScreenOf(xw);
-    Char line[20];
+    Char line[64];
 
     if (use_cursor_loc) {
 	cell = screen->cursorp;
@@ -2264,18 +2277,34 @@
 	    if (isSameCELL(&(screen->rawPos), &(screen->startSel))
 		&& isSameCELL(&cell, &(screen->endSel))) {
 		/* Use short-form emacs select */
-		line[count++] = 't';
+		if (!screen->urxvt_ext_mode_mouse) {
+		    line[count++] = 't';
+		}
 		count = EmitMousePosition(screen, line, count, screen->endSel.col);
+		count = EmitMousePositionSeparator(screen, line, count);
 		count = EmitMousePosition(screen, line, count, screen->endSel.row);
+		if (screen->urxvt_ext_mode_mouse) {
+		    line[count++] = 't';
+		}
 	    } else {
 		/* long-form, specify everything */
-		line[count++] = 'T';
+		if (!screen->urxvt_ext_mode_mouse) {
+		    line[count++] = 'T';
+		}
 		count = EmitMousePosition(screen, line, count, screen->startSel.col);
+		count = EmitMousePositionSeparator(screen, line, count);
 		count = EmitMousePosition(screen, line, count, screen->startSel.row);
+		count = EmitMousePositionSeparator(screen, line, count);
 		count = EmitMousePosition(screen, line, count, screen->endSel.col);
+		count = EmitMousePositionSeparator(screen, line, count);
 		count = EmitMousePosition(screen, line, count, screen->endSel.row);
+		count = EmitMousePositionSeparator(screen, line, count);
 		count = EmitMousePosition(screen, line, count, cell.col);
+		count = EmitMousePositionSeparator(screen, line, count);
 		count = EmitMousePosition(screen, line, count, cell.row);
+		if (screen->urxvt_ext_mode_mouse) {
+		    line[count++] = 'T';
+		}
 	    }
 	    v_write(screen->respond, line, count);
 	    TrackText(xw, &zeroCELL, &zeroCELL);
@@ -4066,11 +4095,11 @@
 }
 
 static unsigned
-EmitButtonCode(TScreen * screen, Char * line, unsigned count, XButtonEvent * event)
+EmitButtonCode(TScreen * screen, Char * line, unsigned count, int value)
 {
-    int value = BtnCode(event, screen->mouse_button);
-
-    if (!screen->ext_mode_mouse || value < 128) {
+    if (screen->urxvt_ext_mode_mouse) {
+	count += sprintf(line + count, "%d", value);
+    } else if (!screen->ext_mode_mouse || value < 128) {
 	line[count++] = CharOf(value);
     } else {
 	line[count++] = CharOf(0xC0 + (value >> 6));
@@ -4084,8 +4113,8 @@
 {
     TScreen *screen = TScreenOf(xw);
     int pty = screen->respond;
-    int mouse_limit = screen->ext_mode_mouse ? EXT_MOUSE_LIMIT : MOUSE_LIMIT;
-    Char line[10];
+    int mouse_limit = screen->urxvt_ext_mode_mouse ? -1 : screen->ext_mode_mouse ? EXT_MOUSE_LIMIT : MOUSE_LIMIT;
+    Char line[32];
     int row, col;
     int button;
     unsigned count = 0;
@@ -4111,11 +4140,13 @@
     else if (col > screen->max_col)
 	col = screen->max_col;
 
-    /* Limit to representable mouse dimensions */
-    if (row > mouse_limit)
-	row = mouse_limit;
-    if (col > mouse_limit)
-	col = mouse_limit;
+    if (mouse_limit > 0) {
+	/* Limit to representable mouse dimensions */
+	if (row > mouse_limit)
+	    row = mouse_limit;
+	if (col > mouse_limit)
+	    col = mouse_limit;
+    }
 
     /* Build key sequence starting with \E[M */
     if (screen->control_eight_bits) {
@@ -4133,17 +4164,19 @@
 	line[count++] = '>';
     }
 #endif
-    line[count++] = 'M';
+    if (!screen->urxvt_ext_mode_mouse) {
+        line[count++] = 'M';
+    }
 
     /* Add event code to key sequence */
     if (screen->send_mouse_pos == X10_MOUSE) {
-	line[count++] = CharOf(' ' + button);
+	count = EmitButtonCode(screen, line, count, CharOf(' ' + button));
     } else {
 	/* Button-Motion events */
 	switch (event->type) {
 	case ButtonPress:
 	    screen->mouse_button = button;
-	    count = EmitButtonCode(screen, line, count, event);
+	    count = EmitButtonCode(screen, line, count, BtnCode(event, button));
 	    break;
 	case ButtonRelease:
 	    /*
@@ -4154,7 +4187,7 @@
 	    if (button < 3)
 		button = -1;
 	    screen->mouse_button = button;
-	    count = EmitButtonCode(screen, line, count, event);
+	    count = EmitButtonCode(screen, line, count, BtnCode(event, button));
 	    break;
 	case MotionNotify:
 	    /* BTN_EVENT_MOUSE and ANY_EVENT_MOUSE modes send motion
@@ -4164,7 +4197,7 @@
 		&& (col == screen->mouse_col)) {
 		changed = False;
 	    } else {
-		count = EmitButtonCode(screen, line, count, event);
+		count = EmitButtonCode(screen, line, count, BtnCode(event, screen->mouse_button));
 	    }
 	    break;
 	default:
@@ -4180,9 +4213,15 @@
 	TRACE(("mouse at %d,%d button+mask = %#x\n", row, col, line[count - 1]));
 
 	/* Add pointer position to key sequence */
+	count = EmitMousePositionSeparator(screen, line, count);
 	count = EmitMousePosition(screen, line, count, col);
+	count = EmitMousePositionSeparator(screen, line, count);
 	count = EmitMousePosition(screen, line, count, row);
 
+	if (screen->urxvt_ext_mode_mouse) {
+	    line[count++] = 'M';
+	}
+
 	/* Transmit key sequence to process running under xterm */
 	v_write(pty, line, count);
     }
diff -ur xterm-276.orig/charproc.c xterm-276/charproc.c
--- xterm-276.orig/charproc.c	2011-09-04 20:18:16.000000000 +0200
+++ xterm-276/charproc.c	2011-11-06 20:05:17.000000000 +0100
@@ -4360,6 +4360,9 @@
 	case SET_EXT_MODE_MOUSE:
 	    set_bool_mode(screen->ext_mode_mouse);
 	    break;
+	case SET_URXVT_EXT_MODE_MOUSE:
+	    set_bool_mode(screen->urxvt_ext_mode_mouse);
+	    break;
 	case 1010:		/* rxvt */
 	    set_bool_mode(screen->scrollttyoutput);
 	    update_scrollttyoutput();
@@ -4565,6 +4568,9 @@
 	case SET_EXT_MODE_MOUSE:
 	    DoSM(DP_X_EXT_MOUSE, screen->ext_mode_mouse);
 	    break;
+	case SET_URXVT_EXT_MODE_MOUSE:
+	    DoSM(DP_X_EXT_MOUSE, screen->urxvt_ext_mode_mouse);
+	    break;
 	case 1048:
 	    if (!xw->misc.titeInhibit) {
 		CursorSave(xw);
@@ -4736,6 +4742,9 @@
 	case SET_EXT_MODE_MOUSE:
 	    DoRM(DP_X_EXT_MOUSE, screen->ext_mode_mouse);
 	    break;
+	case SET_URXVT_EXT_MODE_MOUSE:
+	    DoRM(DP_X_EXT_MOUSE, screen->urxvt_ext_mode_mouse);
+	    break;
 	case 1048:
 	    if (!xw->misc.titeInhibit) {
 		CursorRestore(xw);
@@ -8385,6 +8394,7 @@
 	screen->send_mouse_pos = MOUSE_OFF;
 	screen->send_focus_pos = OFF;
 	screen->ext_mode_mouse = OFF;
+	screen->urxvt_ext_mode_mouse = OFF;
 	screen->waitingForTrackInfo = False;
 	screen->eventMode = NORMAL;
 
diff -ur xterm-276.orig/ctlseqs.ms xterm-276/ctlseqs.ms
--- xterm-276.orig/ctlseqs.ms	2011-09-04 20:14:33.000000000 +0200
+++ xterm-276/ctlseqs.ms	2011-11-06 20:03:23.000000000 +0100
@@ -2010,6 +2010,8 @@
 #define SET_FOCUS_EVENT_MOUSE       1004
 
 #define SET_EXT_MODE_MOUSE          1005
+
+#define SET_URXVT_EXT_MODE_MOUSE    1015
 .DE
 .br
 The motion reporting modes are strictly \fIxterm\fP extensions, and are not
diff -ur xterm-276.orig/ctlseqs.txt xterm-276/ctlseqs.txt
--- xterm-276.orig/ctlseqs.txt	2011-09-04 20:14:58.000000000 +0200
+++ xterm-276/ctlseqs.txt	2011-11-06 20:03:20.000000000 +0100
@@ -1356,6 +1356,8 @@
 
                 #define SET_EXT_MODE_MOUSE          1005
 
+                #define SET_URXVT_EXT_MODE_MOUSE    1015
+
 The motion reporting modes are strictly xterm extensions, and are not
 part of any standard, though they are analogous to the DEC VT200 DECELR
 locator reports.
diff -ur xterm-276.orig/misc.c xterm-276/misc.c
--- xterm-276.orig/misc.c	2011-10-09 16:13:41.000000000 +0200
+++ xterm-276/misc.c	2011-11-06 20:03:43.000000000 +0100
@@ -3776,6 +3776,9 @@
 	case SET_EXT_MODE_MOUSE:
 	    result = MdBool(screen->ext_mode_mouse);
 	    break;
+	case SET_URXVT_EXT_MODE_MOUSE:
+	    result = MdBool(screen->urxvt_ext_mode_mouse);
+	    break;
 	case 1010:		/* rxvt */
 	    result = MdBool(screen->scrollttyoutput);
 	    break;
diff -ur xterm-276.orig/ptyx.h xterm-276/ptyx.h
--- xterm-276.orig/ptyx.h	2011-08-31 00:39:45.000000000 +0200
+++ xterm-276/ptyx.h	2011-11-06 20:05:29.000000000 +0100
@@ -1635,6 +1635,7 @@
 	unsigned	send_mouse_pos;	/* user wants mouse transition  */
 					/* and position information	*/
 	Boolean		ext_mode_mouse; /* support large terminals      */
+	Boolean		urxvt_ext_mode_mouse; /* support large terminals */
 	Boolean		send_focus_pos; /* user wants focus in/out info */
 	Boolean		quiet_grab;	/* true if no cursor change on focus */
 #if OPT_PASTE64
diff -ur xterm-276.orig/xcharmouse.h xterm-276/xcharmouse.h
--- xterm-276.orig/xcharmouse.h	2010-08-19 11:30:03.000000000 +0200
+++ xterm-276/xcharmouse.h	2011-11-06 20:04:04.000000000 +0100
@@ -48,6 +48,7 @@
 
 /* Extend mouse tracking for terminals wider(taller) than 223 cols(rows) */
 #define SET_EXT_MODE_MOUSE          1005 /* compatible with above */
+#define SET_URXVT_EXT_MODE_MOUSE    1015
 
 #define SET_BUTTON1_MOVE_POINT      2001 /* click1 emit Esc seq to move point*/
 #define SET_BUTTON2_MOVE_POINT      2002 /* press2 emit Esc seq to move point*/

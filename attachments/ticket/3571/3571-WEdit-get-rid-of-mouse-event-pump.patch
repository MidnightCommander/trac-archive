From 52676419a293f162a6ee866d7e60daac703bf4e6 Mon Sep 17 00:00:00 2001
From: Mooffie <mooffie@gmail.com>
Date: Sat, 26 Mar 2016 22:31:04 +0300
Subject: [PATCH] WEdit: get rid of mouse event pump.

---
 src/editor/editwidget.c | 169 +++++++++++++++++-------------------------------
 1 file changed, 60 insertions(+), 109 deletions(-)

diff --git a/src/editor/editwidget.c b/src/editor/editwidget.c
index 277af8e..b2f1ee0 100644
--- a/src/editor/editwidget.c
+++ b/src/editor/editwidget.c
@@ -752,79 +752,6 @@ edit_update_cursor (WEdit * edit, const mouse_event_t * event)
 }
 
 /* --------------------------------------------------------------------------------------------- */
-
-static inline void
-edit_mouse_move_resize (WEdit * edit, mouse_event_t event)
-{
-    Widget *w = WIDGET (edit);
-    Gpm_Event gevent;
-
-    /* init with 1-based global coordinates */
-    gevent.y = w->y + event.y + 1;
-    gevent.x = w->x + event.x + 1;
-
-    while (edit->drag_state != MCEDIT_DRAG_NORMAL)
-    {
-        int c;
-
-        if (event.msg == MSG_MOUSE_UP)
-            goto finish;
-
-        /* resize or move */
-        if (!edit->fullscreen)
-        {
-            Widget *h = WIDGET (w->owner);
-
-            if (edit->drag_state == MCEDIT_DRAG_MOVE)
-            {
-                /* make 0-based */
-                gevent.y--;
-                gevent.x--;
-
-                gevent.y = max (gevent.y, h->y + 1);    /* status line */
-                gevent.y = min (gevent.y, h->y + h->lines - 2); /* buttonbar */
-                gevent.x = max (gevent.x, h->x);
-                gevent.x = min (gevent.x, h->x + h->cols - 1);
-
-                /* don't use widget_set_size() here to avoid double draw  */
-                w->y = gevent.y;
-                w->x = gevent.x - edit->drag_state_start;
-                edit->force |= REDRAW_COMPLETELY;
-            }
-            else if (edit->drag_state == MCEDIT_DRAG_RESIZE)
-            {
-                gevent.y = min (gevent.y, h->y + h->lines - 1); /* buttonbar */
-                gevent.x = min (gevent.x, h->x + h->cols);
-                gevent = mouse_get_local (&gevent, w);
-
-                /* don't use widget_set_size() here to avoid double draw  */
-                w->lines = max (WINDOW_MIN_LINES, gevent.y);
-                w->cols = max (WINDOW_MIN_COLS, gevent.x);
-                edit->force |= REDRAW_COMPLETELY;
-            }
-
-            dlg_redraw (w->owner);
-        }
-
-        /* Get next event.
-         * Don't use standard way in order to continue event handling
-         * outside of widget */
-        c = tty_get_event (&gevent, FALSE, TRUE);
-        if (c == EV_MOUSE)
-            event = mouse_translate_event (w, &gevent);
-        else
-        {
-          finish:
-            /* redraw frame */
-            edit->drag_state = MCEDIT_DRAG_NORMAL;
-            edit->force |= REDRAW_COMPLETELY;
-            edit_update_screen (edit);
-            w->mouse.forced_capture = FALSE;
-        }
-    }
-}
-
-/* --------------------------------------------------------------------------------------------- */
 /** Callback for the edit dialog */
 
 static cb_ret_t
@@ -1072,6 +999,50 @@ edit_callback (Widget * w, Widget * sender, widget_msg_t msg, int parm, void *da
 /* --------------------------------------------------------------------------------------------- */
 
 /**
+ * Handle move/resize mouse events.
+ */
+static void
+edit_mouse_handle_move_resize (Widget * w, mouse_msg_t msg, mouse_event_t * event)
+{
+    WEdit *edit = (WEdit *) (w);
+    Widget *h = WIDGET (w->owner);
+    int global_x, global_y;
+
+    if (msg == MSG_MOUSE_UP)
+    {
+        /* Exit drag mode. */
+        edit_execute_cmd (edit, CK_Enter, -1);
+        return;
+    }
+
+    /* Convert point to global coordinates for easier calculations. */
+    global_x = event->x + w->x;
+    global_y = event->y + w->y;
+
+    /* Clamp the point to the dialog's client area. */
+    global_y = CLAMP (global_y, h->y + 1, h->y + h->lines - 2); /* Status line, buttonbar */
+    global_x = CLAMP (global_x, h->x, h->x + h->cols - 1);      /* Currently a no-op, as the dialog has no left/right margins. */
+
+    if (edit->drag_state == MCEDIT_DRAG_MOVE)
+    {
+        w->y = global_y;
+        w->x = global_x - edit->drag_state_start;
+    }
+    else if (edit->drag_state == MCEDIT_DRAG_RESIZE)
+    {
+        w->lines = max (WINDOW_MIN_LINES, global_y - w->y + 1);
+        w->cols = max (WINDOW_MIN_COLS, global_x - w->x + 1);
+    }
+
+    edit->force |= REDRAW_COMPLETELY;   /* Not really needed as WEdit's MSG_DRAW already does this. */
+
+    /* We draw the whole dialog because dragging/resizing exposes area beneath. */
+    dlg_redraw (w->owner);
+}
+
+/* --------------------------------------------------------------------------------------------- */
+
+/**
  * Handle mouse events of editor window
  *
  * @param w Widget object (the editor window)
@@ -1090,13 +1061,16 @@ edit_mouse_callback (Widget * w, mouse_msg_t msg, mouse_event_t * event)
     close_x = (w->cols - 1) - dx - 1;
     toggle_fullscreen_x = close_x - 3;
 
+    if (edit->drag_state != MCEDIT_DRAG_NORMAL)
+    {
+        /* window is being resized/moved */
+        edit_mouse_handle_move_resize (w, msg, event);
+        return;
+    }
+
     switch (msg)
     {
     case MSG_MOUSE_DOWN:
-        if (w->mouse.forced_capture)
-            /* window is being resized/moved by keys */
-            break;
-
         dlg_set_top_widget (w);
         edit_update_curs_row (edit);
         edit_update_curs_col (edit);
@@ -1113,9 +1087,7 @@ edit_mouse_callback (Widget * w, mouse_msg_t msg, mouse_event_t * event)
                 {
                     /* start window move */
                     edit->drag_state_start = event->x;
-                    edit->drag_state = MCEDIT_DRAG_MOVE;
-                    edit->force |= REDRAW_COMPLETELY;
-                    edit_update_screen (edit);
+                    edit_execute_cmd (edit, CK_WindowMove, -1);
                 }
                 break;
             }
@@ -1123,25 +1095,19 @@ edit_mouse_callback (Widget * w, mouse_msg_t msg, mouse_event_t * event)
             if (event->y == w->lines - 1 && event->x == w->cols - 1)
             {
                 /* bottom-right corner -- start window resize */
-                edit->drag_state = MCEDIT_DRAG_RESIZE;
-                edit->force |= REDRAW_COMPLETELY;
-                edit_update_screen (edit);
+                edit_execute_cmd (edit, CK_WindowResize, -1);
                 break;
             }
         }
 
-        /* fall throught to start/stop text selection */
+        /* fall through to start/stop text selection */
 
     case MSG_MOUSE_UP:
-        edit->drag_state = MCEDIT_DRAG_NORMAL;
         edit_update_cursor (edit, event);
         edit_total_update (edit);
-        w->mouse.forced_capture = FALSE;
         break;
 
     case MSG_MOUSE_CLICK:
-        edit->drag_state = MCEDIT_DRAG_NORMAL;
-
         if (event->y == 0)
         {
             if (event->x == close_x)
@@ -1149,13 +1115,8 @@ edit_mouse_callback (Widget * w, mouse_msg_t msg, mouse_event_t * event)
             else if (event->x == toggle_fullscreen_x)
                 edit_toggle_fullscreen (edit);
             else if (!edit->fullscreen && event->count == GPM_DOUBLE)
-            {
                 /* double click on top line (toggle fullscreen) */
                 edit_toggle_fullscreen (edit);
-                edit->drag_state = MCEDIT_DRAG_NORMAL;
-                edit->force |= REDRAW_COMPLETELY;
-                edit_update_screen (edit);
-            }
         }
         else if (event->count == GPM_DOUBLE)
         {
@@ -1172,13 +1133,8 @@ edit_mouse_callback (Widget * w, mouse_msg_t msg, mouse_event_t * event)
         break;
 
     case MSG_MOUSE_DRAG:
-        if (edit->drag_state == MCEDIT_DRAG_NORMAL)
-        {
-            edit_update_cursor (edit, event);
-            edit_total_update (edit);
-        }
-        else
-            edit_mouse_move_resize (edit, *event);
+        edit_update_cursor (edit, event);
+        edit_total_update (edit);
         break;
 
     case MSG_MOUSE_SCROLL_UP:
@@ -1405,13 +1361,11 @@ edit_add_window (WDialog * h, int y, int x, int lines, int cols, const vfs_path_
 gboolean
 edit_handle_move_resize (WEdit * edit, long command)
 {
-    Widget *w = WIDGET (edit);
     gboolean ret = FALSE;
 
     if (edit->fullscreen)
     {
         edit->drag_state = MCEDIT_DRAG_NORMAL;
-        w->mouse.forced_capture = FALSE;
         return ret;
     }
 
@@ -1424,11 +1378,13 @@ edit_handle_move_resize (WEdit * edit, long command)
         case CK_WindowMove:
             edit->drag_state = MCEDIT_DRAG_MOVE;
             edit_save_size (edit);
+            edit_status (edit, TRUE);   /* redraw frame and status */
             ret = TRUE;
             break;
         case CK_WindowResize:
             edit->drag_state = MCEDIT_DRAG_RESIZE;
             edit_save_size (edit);
+            edit_status (edit, TRUE);   /* redraw frame and status */
             ret = TRUE;
             break;
         default:
@@ -1453,8 +1409,7 @@ edit_handle_move_resize (WEdit * edit, long command)
         case CK_Enter:
         case CK_WindowMove:
             edit->drag_state = MCEDIT_DRAG_NORMAL;
-            /* redraw frame and status */
-            edit_status (edit, TRUE);
+            edit_status (edit, TRUE);   /* redraw frame and status */
         default:
             ret = TRUE;
             break;
@@ -1478,8 +1433,7 @@ edit_handle_move_resize (WEdit * edit, long command)
         case CK_Enter:
         case CK_WindowResize:
             edit->drag_state = MCEDIT_DRAG_NORMAL;
-            /* redraw frame and status */
-            edit_status (edit, TRUE);
+            edit_status (edit, TRUE);   /* redraw frame and status */
         default:
             ret = TRUE;
             break;
@@ -1490,9 +1444,6 @@ edit_handle_move_resize (WEdit * edit, long command)
         break;
     }
 
-    /* allow stop resize/move by mouse click outside window */
-    w->mouse.forced_capture = ret;
-
     return ret;
 }
 
-- 
2.5.0


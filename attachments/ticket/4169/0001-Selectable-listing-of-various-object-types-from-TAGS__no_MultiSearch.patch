From 41b925152221c864d37f425b7a73ea354cbe197e Mon Sep 17 00:00:00 2001
From: Sebastian Gniazdowski <sgniazdowski@gmail.com>
Date: Sun, 10 Jan 2021 10:41:55 -0600
Subject: [PATCH] Selectable listing of various object types from TAGS file.

---
 lib/keybind.c                |   5 +
 lib/keybind.h                |   5 +
 lib/strutil.h                |   2 +
 lib/strutil/strutil.c        |  32 ++++++
 misc/mc.default.keymap       |   5 +
 src/editor/edit-impl.h       |   3 +-
 src/editor/edit.c            |  17 ++-
 src/editor/editcmd.c         | 183 ++++++++++++++++++++++++--------
 src/editor/editcmd_dialogs.c | 122 +++++++++-------------
 src/editor/editcmd_dialogs.h |   6 +-
 src/editor/etags.c           | 197 +++++++++++++++++++++++++++++++++++
 src/editor/etags.h           |  36 ++++++-
 src/keybind-defaults.c       |   5 +
 13 files changed, 491 insertions(+), 127 deletions(-)

diff --git a/lib/keybind.c b/lib/keybind.c
index abd44d3e2..41a39579b 100644
--- a/lib/keybind.c
+++ b/lib/keybind.c
@@ -152,6 +152,11 @@ static name_keymap_t command_names[] = {
     ADD_KEYMAP_NAME (ViewRaw),
     ADD_KEYMAP_NAME (ViewFile),
     ADD_KEYMAP_NAME (ViewFiltered),
+    ADD_KEYMAP_NAME (SelectFunction),
+    ADD_KEYMAP_NAME (SelectVariable),
+    ADD_KEYMAP_NAME (SelectType),
+    ADD_KEYMAP_NAME (SelectOther),
+    ADD_KEYMAP_NAME (SelectAllKinds),
     ADD_KEYMAP_NAME (Find),
     ADD_KEYMAP_NAME (DirSize),
     ADD_KEYMAP_NAME (CompareDirs),
diff --git a/lib/keybind.h b/lib/keybind.h
index 9638bd651..92f496479 100644
--- a/lib/keybind.h
+++ b/lib/keybind.h
@@ -139,6 +139,11 @@ enum
     CK_ViewRaw,
     CK_ViewFile,
     CK_ViewFiltered,
+    CK_SelectFunction,
+    CK_SelectVariable,
+    CK_SelectType,
+    CK_SelectOther,
+    CK_SelectAllKinds,
     CK_Find,
     CK_DirSize,
     CK_HotListAdd,
diff --git a/lib/strutil.h b/lib/strutil.h
index a091c25aa..abfe4014d 100644
--- a/lib/strutil.h
+++ b/lib/strutil.h
@@ -582,6 +582,8 @@ strtol_error_t xstrtoumax (const char *s, char **ptr, int base, uintmax_t * val,
                            const char *valid_suffixes);
 uintmax_t parse_integer (const char *str, gboolean * invalid);
 
+char *str_collapse_whitespace(char *s, char overwrite_char);
+
 /* --------------------------------------------------------------------------------------------- */
 /*** inline functions ****************************************************************************/
 /* --------------------------------------------------------------------------------------------- */
diff --git a/lib/strutil/strutil.c b/lib/strutil/strutil.c
index cf11d00d8..adc29c406 100644
--- a/lib/strutil/strutil.c
+++ b/lib/strutil/strutil.c
@@ -29,6 +29,7 @@
 #include <langinfo.h>
 #include <string.h>
 #include <errno.h>
+#include <ctype.h>
 
 #include "lib/global.h"
 #include "lib/util.h"           /* MC_PTR_FREE */
@@ -1021,3 +1022,34 @@ parse_integer (const char *str, gboolean * invalid)
 }
 
 /* --------------------------------------------------------------------------------------------- */
+
+char *str_collapse_whitespace(char *s, char overwrite_char)
+{
+    int i, wi=0, size, span=0;
+    size=strlen(s);
+
+    /* Skip leading whitespace. */
+    for (i=0; i<size; i++) {
+        if (!isspace(s[i]))
+            break;
+    }
+
+    /* Collapse remaining whitespace. */
+    for (; i<size; i++) {
+        if (isspace(s[i])) // == ' ')
+            span=1;
+        else {
+            if(span)
+                s[wi++] = overwrite_space;
+
+            s[wi++] = s[i];
+            span = 0;
+        }
+    }
+
+    s[wi]='\0';
+
+    return s;
+}
+
+/* --------------------------------------------------------------------------------------------- */
diff --git a/misc/mc.default.keymap b/misc/mc.default.keymap
index 1bf68b2df..721e85022 100644
--- a/misc/mc.default.keymap
+++ b/misc/mc.default.keymap
@@ -387,6 +387,11 @@ SpellCheckCurrentWord = ctrl-p
 # WindowNext =
 # WindowPrev =
 # ExtendedKeyMap =
+SelectFunction = alt-shift-f
+SelectVariable = alt-shift-v
+SelectType = alt-shift-t
+SelectOther = alt-shift-o
+SelectAllKinds = alt-shift-a
 
 [viewer]
 Help = f1
diff --git a/src/editor/edit-impl.h b/src/editor/edit-impl.h
index 3ad04dbea..dd996face 100644
--- a/src/editor/edit-impl.h
+++ b/src/editor/edit-impl.h
@@ -18,6 +18,7 @@
 #include "lib/vfs/vfs.h"        /* vfs_path_t */
 
 #include "edit.h"
+#include "etags.h"
 
 /*** typedefs(not structures) and defined constants **********************************************/
 
@@ -202,7 +203,7 @@ mc_search_cbret_t edit_search_cmd_callback (const void *user_data, gsize char_of
 mc_search_cbret_t edit_search_update_callback (const void *user_data, gsize char_offset);
 
 void edit_complete_word_cmd (WEdit * edit);
-void edit_get_match_keyword_cmd (WEdit * edit);
+void edit_select_object_from_tags(WEdit * edit, etags_jump_type_t type);
 
 #ifdef HAVE_ASPELL
 int edit_suggest_current_word (WEdit * edit);
diff --git a/src/editor/edit.c b/src/editor/edit.c
index e13be389a..0e7e75867 100644
--- a/src/editor/edit.c
+++ b/src/editor/edit.c
@@ -3860,8 +3860,23 @@ edit_execute_cmd (WEdit * edit, long command, int char_for_insertion)
         else
             edit_complete_word_cmd (edit);
         break;
+    case CK_SelectFunction:
+        edit_select_object_from_tags(edit, TAG_JUMP_KIND_FUNCTION_LIST);
+        break;
+    case CK_SelectVariable:
+        edit_select_object_from_tags(edit, TAG_JUMP_KIND_VAR_LIST);
+        break;
+    case CK_SelectType:
+        edit_select_object_from_tags(edit, TAG_JUMP_KIND_TYPE_LIST);
+        break;
+    case CK_SelectOther:
+        edit_select_object_from_tags(edit, TAG_JUMP_KIND_OTHER_LIST);
+        break;
+    case CK_SelectAllKinds:
+        edit_select_object_from_tags(edit, TAG_JUMP_KIND_ANY_LIST);
+        break;
     case CK_Find:
-        edit_get_match_keyword_cmd (edit);
+        edit_select_object_from_tags(edit, TAG_JUMP_KIND_MATCH_WORD);
         break;
 
 #ifdef HAVE_ASPELL
diff --git a/src/editor/editcmd.c b/src/editor/editcmd.c
index e2b904604..4265cd8fc 100644
--- a/src/editor/editcmd.c
+++ b/src/editor/editcmd.c
@@ -1140,7 +1140,7 @@ edit_find_word_start (const edit_buffer_t * buf, off_t * word_start, gsize * wor
         return FALSE;
 
     c = edit_buffer_get_previous_byte (buf);
-    /* return if not at end or in word */
+    /* return if the word is empty */
     if (is_break_char (c))
         return FALSE;
 
@@ -1169,6 +1169,37 @@ edit_find_word_start (const edit_buffer_t * buf, off_t * word_start, gsize * wor
     return TRUE;
 }
 
+/* Gets the word on the left of the cursor.
+ *
+ * @param buf The edit buffer.
+ * @param initial Initial contents of the result.
+ * @param release_on_empty Should the initial g_string be released when returning NULL.
+ * @return g_string with the word or NULL if the word is empty.
+*/
+static GString *
+edit_get_left_whole_word(const edit_buffer_t * buf, GString *initial, gboolean release_on_empty)
+{
+    GString *ret = initial;
+    gsize i, word_len = 0;
+    off_t word_start = 0;
+
+    /* Search start of word left of cursor. */
+    if (!edit_find_word_start (buf, &word_start, &word_len)) {
+        if (initial && release_on_empty)
+            g_string_free(initial, TRUE);
+        return NULL;
+    }
+
+    /* ret = g_strdup_printf ("\\b%.*s[a-zA-Z_0-9]+", word_len, bufpos); */
+    if (!ret)
+        ret = g_string_sized_new (SHORT_DEF_LEN);
+
+    for (i = 0; i < word_len; i++)
+        g_string_append_c (ret, edit_buffer_get_byte (buf, word_start + i));
+
+    return ret;
+}
+
 /* --------------------------------------------------------------------------------------------- */
 /**
  * Get current word under cursor
@@ -3501,62 +3532,122 @@ edit_load_back_cmd (WEdit * edit)
 /* --------------------------------------------------------------------------------------------- */
 
 void
-edit_get_match_keyword_cmd (WEdit * edit)
+edit_select_object_from_tags(WEdit * edit, etags_jump_type_t type)
 {
-    gsize word_len = 0, max_len = 0;
-    int num_def = 0;
-    gsize i;
-    off_t word_start = 0;
-    GString *match_expr;
-    char *path = NULL;
-    char *ptr = NULL;
-    char *tagfile = NULL;
+    int i, num_obj, max_len;
 
-    etags_hash_t def_hash[MAX_DEFINITIONS];
+    /* Group 0-initialized pointers into a struct for easy initialization. */
+    struct {
+        const char *fname0; char *fname, *tagfile, *path, *ptr;
+        GString *match_expr;
+        etags_hash_t found_func[MAX_TAG_OBJECTS], *selected_object;
+    } var = {0};
 
-    for (i = 0; i < MAX_DEFINITIONS; i++)
-        def_hash[i].filename = NULL;
-
-    /* search start of word to be completed */
-    if (!edit_find_word_start (&edit->buffer, &word_start, &word_len))
+    /* No file means no entries in tags file â†’ exit. */
+    if (edit->filename_vpath == NULL)
         return;
 
-    /* prepare match expression */
-    match_expr = g_string_sized_new (word_len);
-    for (i = 0; i < word_len; i++)
-        g_string_append_c (match_expr, edit_buffer_get_byte (&edit->buffer, word_start + i));
+    /* Set up current directory variable. */
+    var.ptr = g_get_current_dir ();
+    var.path = g_strconcat (var.ptr, PATH_SEP_STR, (char *) NULL);
+    g_free (var.ptr);
 
-    ptr = g_get_current_dir ();
-    path = g_strconcat (ptr, PATH_SEP_STR, (char *) NULL);
-    g_free (ptr);
+    /* Locate the tags file and its directory.  */
+    etags_locate_tags_file(&var.tagfile, &var.path);
 
-    /* Recursive search file 'TAGS' in parent dirs */
-    do
-    {
-        ptr = g_path_get_dirname (path);
-        g_free (path);
-        path = ptr;
-        g_free (tagfile);
-        tagfile = mc_build_filename (path, TAGS_NAME, (char *) NULL);
-        if (exist_file (tagfile))
-            break;
+    if (!var.tagfile)
+        goto exit_jump_tag_obj;
+
+    if (type >= TAG_JUMP_KIND_FUNCTION_LIST && type <= TAG_JUMP_KIND_ANY_LIST) {
+        /* Establish the base relative filename of current buffer. */
+        var.fname0 = vfs_path_as_str (edit->filename_vpath);
+        if (g_str_has_prefix(var.fname0, var.path)) {
+            var.fname0 = var.fname0 + strlen(var.path) + 1;
+            var.fname = g_strdup(var.fname0);
+        } else
+            /* A fallback that shouldn't be needed and is unreliable. */
+            var.fname = g_path_get_basename(var.fname0);
+        var.match_expr = g_string_new(var.fname);
+    } else if (type == TAG_JUMP_KIND_MATCH_WORD) {
+        // The function releases the string on empty word result.
+        var.match_expr = edit_get_left_whole_word(&edit->buffer, NULL, FALSE);
+
+        if(!var.match_expr)
+            goto exit_jump_tag_obj;
+
+    } else
+        goto exit_jump_tag_obj;
+
+    if (type >= TAG_JUMP_KIND_FUNCTION_LIST && type <= TAG_JUMP_KIND_ANY_LIST) {
+        num_obj = etags_get_objects_for_file(type, var.tagfile, var.path, var.fname, (etags_hash_t *)
+                        &var.found_func, &max_len, MAX_TAG_OBJECTS);
+    } else {
+        max_len = MAX_WIDTH_DEF_DIALOG;
+        num_obj = etags_set_definition_hash (var.tagfile, var.path, var.match_expr->str, (etags_hash_t *) 
+&var.found_func);
     }
-    while (strcmp (path, PATH_SEP_STR) != 0);
 
-    if (tagfile != NULL)
-    {
-        num_def =
-            etags_set_definition_hash (tagfile, path, match_expr->str, (etags_hash_t *) & def_hash);
-        g_free (tagfile);
+    /* Show the list. */
+    if (num_obj > 0)
+        var.selected_object = editcmd_dialog_select_tags_object_show (edit, var.fname, max_len,
+                                               (etags_hash_t *) & var.found_func, type, num_obj);
+
+    if (var.selected_object) {
+        int line = var.selected_object->line;
+
+        /* Move the display to the function line. */
+        if (type >= TAG_JUMP_KIND_FUNCTION_LIST && type <= TAG_JUMP_KIND_ANY_LIST) {
+            edit_move_display (edit, line - WIDGET (edit)->lines / 2 - 1);
+            edit_move_to_line (edit, line - 1);
+            edit->force |= REDRAW_COMPLETELY;
+        } else {
+            char *fullpath = var.selected_object->fullpath;
+            gboolean do_moveto = FALSE;
+            if (!edit->modified)
+                do_moveto = TRUE;
+            else if (!edit_query_dialog2
+                     (_("Warning"),
+                      _("Current text was modified without a file save.\n"
+                        "Continue discards these changes."), _("C&ontinue"), _("&Cancel")))
+            {
+                edit->force |= REDRAW_COMPLETELY;
+                do_moveto = TRUE;
+            }
+
+            if (do_moveto) {
+                /* Replace the file in current editor (no new file is opened). */
+                vfs_path_free (edit_history_moveto[edit_stack_iterator].filename_vpath);
+
+                if (edit->dir_vpath != NULL)
+                    edit_history_moveto[edit_stack_iterator].filename_vpath =
+                        vfs_path_append_vpath_new (edit->dir_vpath, edit->filename_vpath, NULL);
+                else
+                    edit_history_moveto[edit_stack_iterator].filename_vpath =
+                        vfs_path_clone (edit->filename_vpath);
+
+                edit_history_moveto[edit_stack_iterator].line = edit->start_line + edit->curs_row + 1;
+                edit_stack_iterator++;
+                vfs_path_free (edit_history_moveto[edit_stack_iterator].filename_vpath);
+                edit_history_moveto[edit_stack_iterator].filename_vpath =
+                    vfs_path_from_str ((char *) fullpath);
+                edit_history_moveto[edit_stack_iterator].line = line;
+                edit_reload_line (edit, edit_history_moveto[edit_stack_iterator].filename_vpath,
+                                edit_history_moveto[edit_stack_iterator].line);
+            }
+        }
     }
-    g_free (path);
+exit_jump_tag_obj:
+    /* Clear results hash */
+    for (i = 0; i < num_obj; i++)
+        g_free (var.found_func[i].filename);
 
-    max_len = MAX_WIDTH_DEF_DIALOG;
-    word_len = 0;
-    if (num_def > 0)
-        editcmd_dialog_select_definition_show (edit, match_expr->str, max_len, word_len,
-                                               (etags_hash_t *) & def_hash, num_def);
-    g_string_free (match_expr, TRUE);
+    /* Release other variables. */
+    g_free(var.fname);
+    g_free(var.tagfile);
+    g_free(var.path);
+
+    if (var.match_expr)
+        g_string_free(var.match_expr, TRUE);
 }
 
 /* --------------------------------------------------------------------------------------------- */
diff --git a/src/editor/editcmd_dialogs.c b/src/editor/editcmd_dialogs.c
index 8b3634f23..07f81b156 100644
--- a/src/editor/editcmd_dialogs.c
+++ b/src/editor/editcmd_dialogs.c
@@ -408,105 +408,83 @@ editcmd_dialog_completion_show (const WEdit * edit, int max_len, GString ** comp
 }
 
 /* --------------------------------------------------------------------------------------------- */
-/* let the user select where function definition */
+/* function and data structure selection dialog */
 
-void
-editcmd_dialog_select_definition_show (WEdit * edit, char *match_expr, int max_len, int word_len,
-                                       etags_hash_t * def_hash, int num_lines)
+etags_hash_t *
+editcmd_dialog_select_tags_object_show (WEdit * edit, char *match_expr, int max_len,
+                                       etags_hash_t * all_found, etags_jump_type_t type,
+                                       int num_lines)
 {
-    int start_x, start_y, offset, i;
+    int start_x, start_y, offset, i, selected_on_start = 0;
+    gboolean found_current = FALSE;
     char *curr = NULL;
-    WDialog *def_dlg;
-    WListbox *def_list;
-    int def_dlg_h;              /* dialog height */
-    int def_dlg_w;              /* dialog width */
+    WDialog *func_dlg;
+    WListbox *func_list;
+    int func_dlg_h;              /* dialog height */
+    int func_dlg_w;              /* dialog width */
+    etags_hash_t *selection_data = NULL;
 
-    (void) word_len;
     /* calculate the dialog metrics */
-    def_dlg_h = num_lines + 2;
-    def_dlg_w = max_len + 4;
-    start_x = edit->curs_col + edit->start_col - (def_dlg_w / 2) +
+    func_dlg_h = num_lines + 2;
+    func_dlg_w = max_len >= MAX_WIDTH_DEF_DIALOG/2 ? max_len + 4 : MAX_WIDTH_DEF_DIALOG/2 + 4;
+    start_x = edit->curs_col + edit->start_col - (func_dlg_w / 2) +
         EDIT_TEXT_HORIZONTAL_OFFSET + (edit->fullscreen ? 0 : 1) + option_line_state_width;
     start_y = edit->curs_row + EDIT_TEXT_VERTICAL_OFFSET + (edit->fullscreen ? 0 : 1) + 1;
 
     if (start_x < 0)
         start_x = 0;
-    if (def_dlg_w > COLS)
-        def_dlg_w = COLS;
-    if (def_dlg_h > LINES - 2)
-        def_dlg_h = LINES - 2;
+    if (func_dlg_w > COLS)
+        func_dlg_w = COLS;
+    if (func_dlg_h > LINES - 2)
+        func_dlg_h = LINES - 2;
 
-    offset = start_x + def_dlg_w - COLS;
+    offset = start_x + func_dlg_w - COLS;
     if (offset > 0)
         start_x -= offset;
-    offset = start_y + def_dlg_h - LINES;
+    offset = start_y + func_dlg_h - LINES;
     if (offset > 0)
         start_y -= (offset + 1);
 
-    def_dlg = dlg_create (TRUE, start_y, start_x, def_dlg_h, def_dlg_w, WPOS_KEEP_DEFAULT, TRUE,
+    func_dlg = dlg_create (TRUE, start_y, start_x, func_dlg_h, func_dlg_w, WPOS_KEEP_DEFAULT, TRUE,
                           dialog_colors, NULL, NULL, "[Definitions]", match_expr);
-    def_list = listbox_new (1, 1, def_dlg_h - 2, def_dlg_w - 2, FALSE, NULL);
-    group_add_widget (GROUP (def_dlg), def_list);
+    func_list = listbox_new (1, 1, func_dlg_h - 2, func_dlg_w - 2, FALSE, NULL);
+    group_add_widget (GROUP (func_dlg), func_list);
 
     /* fill the listbox with the completions */
     for (i = 0; i < num_lines; i++)
     {
-        char *label_def;
+        char *label = NULL;
 
-        label_def =
-            g_strdup_printf ("%s -> %s:%ld", def_hash[i].short_define, def_hash[i].filename,
-                             def_hash[i].line);
-        listbox_add_item (def_list, LISTBOX_APPEND_AT_END, 0, label_def, &def_hash[i], FALSE);
-        g_free (label_def);
+        if (type >= TAG_JUMP_KIND_FUNCTION_LIST && type <= TAG_JUMP_KIND_ANY_LIST)
+            label = all_found[i].short_define;
+        else if (type == TAG_JUMP_KIND_MATCH_WORD)
+            label =
+                g_strdup_printf ("%s -> %s:%ld", all_found[i].short_define, all_found[i].filename,
+                             all_found[i].line);
+        else
+            label = g_strdup("error");
+        listbox_add_item (func_list, LISTBOX_APPEND_AT_END, 0, label, &all_found[i], FALSE);
+        g_free (label);
+
+        /* Detect currently active code segment. */
+        if ((all_found[i].line - 1) <= edit->buffer.curs_line) {
+            found_current = TRUE;
+            selected_on_start = i;
+        }
     }
+    if (found_current)
+        listbox_select_entry(func_list, selected_on_start);
 
     /* pop up the dialog and apply the chosen completion */
-    if (dlg_run (def_dlg) == B_ENTER)
-    {
-        etags_hash_t *curr_def = NULL;
-        gboolean do_moveto = FALSE;
-
-        listbox_get_current (def_list, &curr, (void **) &curr_def);
-
-        if (!edit->modified)
-            do_moveto = TRUE;
-        else if (!edit_query_dialog2
-                 (_("Warning"),
-                  _("Current text was modified without a file save.\n"
-                    "Continue discards these changes."), _("C&ontinue"), _("&Cancel")))
-        {
-            edit->force |= REDRAW_COMPLETELY;
-            do_moveto = TRUE;
-        }
-
-        if (curr != NULL && do_moveto && edit_stack_iterator + 1 < MAX_HISTORY_MOVETO)
-        {
-            vfs_path_free (edit_history_moveto[edit_stack_iterator].filename_vpath);
-
-            if (edit->dir_vpath != NULL)
-                edit_history_moveto[edit_stack_iterator].filename_vpath =
-                    vfs_path_append_vpath_new (edit->dir_vpath, edit->filename_vpath, NULL);
-            else
-                edit_history_moveto[edit_stack_iterator].filename_vpath =
-                    vfs_path_clone (edit->filename_vpath);
-
-            edit_history_moveto[edit_stack_iterator].line = edit->start_line + edit->curs_row + 1;
-            edit_stack_iterator++;
-            vfs_path_free (edit_history_moveto[edit_stack_iterator].filename_vpath);
-            edit_history_moveto[edit_stack_iterator].filename_vpath =
-                vfs_path_from_str ((char *) curr_def->fullpath);
-            edit_history_moveto[edit_stack_iterator].line = curr_def->line;
-            edit_reload_line (edit, edit_history_moveto[edit_stack_iterator].filename_vpath,
-                              edit_history_moveto[edit_stack_iterator].line);
-        }
-    }
-
-    /* clear definition hash */
-    for (i = 0; i < MAX_DEFINITIONS; i++)
-        g_free (def_hash[i].filename);
+    if (dlg_run (func_dlg) == B_ENTER)
+        listbox_get_current (func_list, &curr, (void **) &selection_data);
 
     /* destroy dialog before return */
-    dlg_destroy (def_dlg);
+    dlg_destroy (func_dlg);
+
+    return selection_data;
 }
 
 /* --------------------------------------------------------------------------------------------- */
diff --git a/src/editor/editcmd_dialogs.h b/src/editor/editcmd_dialogs.h
index f691c857e..8d6a7933a 100644
--- a/src/editor/editcmd_dialogs.h
+++ b/src/editor/editcmd_dialogs.h
@@ -5,7 +5,7 @@
 
 /*** typedefs(not structures) and defined constants **********************************************/
 
-struct etags_hash_struct;
+typedef struct etags_hash_struct etags_hash_t;
 
 #define B_REPLACE_ALL (B_USER+1)
 #define B_REPLACE_ONE (B_USER+2)
@@ -28,8 +28,8 @@ int editcmd_dialog_raw_key_query (const char *heading, const char *query, gboole
 char *editcmd_dialog_completion_show (const WEdit * edit, int max_len, GString ** compl,
                                       int num_compl);
 
-void editcmd_dialog_select_definition_show (WEdit *, char *, int, int, struct etags_hash_struct *,
-                                            int);
+etags_hash_t *editcmd_dialog_select_tags_object_show (WEdit *, char *, int, etags_hash_t *,
+                                                        etags_jump_type_t, int);
 
 int editcmd_dialog_replace_prompt_show (WEdit *, char *, char *, int, int);
 /*** inline functions ****************************************************************************/
diff --git a/src/editor/etags.c b/src/editor/etags.c
index 35c7a2f04..952df9b99 100644
--- a/src/editor/etags.c
+++ b/src/editor/etags.c
@@ -39,6 +39,8 @@
 
 #include "lib/global.h"
 #include "lib/util.h"           /* canonicalize_pathname() */
+#include "lib/fileloc.h"
+#include "lib/strutil.h"
 
 #include "etags.h"
 
@@ -53,6 +55,32 @@
 /*** file scope functions ************************************************************************/
 /* --------------------------------------------------------------------------------------------- */
 
+int
+etags_locate_tags_file(char **tagfile_return, char **path_return) {
+    char *tagfile = *tagfile_return, *path = *path_return, *ptr = NULL;
+    int search_result = 0;
+
+    /* Recursive search file 'TAGS' in parent dirs */
+    do
+    {
+        ptr = g_path_get_dirname (path);
+        g_free (path);
+        path = ptr;
+        g_free (tagfile);
+        tagfile = mc_build_filename (path, TAGS_NAME, (char *) NULL);
+        if (exist_file (tagfile)) {
+            search_result = 1;
+            break;
+        }
+    }
+    while (strcmp (path, PATH_SEP_STR) != 0);
+
+    *tagfile_return = tagfile;
+    *path_return = path;
+
+    return search_result;
+}
+
 static gboolean
 parse_define (const char *buf, char **long_name, char **short_name, long *line)
 {
@@ -169,6 +197,175 @@ parse_define (const char *buf, char **long_name, char **short_name, long *line)
 /*** public functions ****************************************************************************/
 /* --------------------------------------------------------------------------------------------- */
 
+/* Fills the etags info array with Â·allÂ· objects of given Â·typeÂ· (functions, etc.) */
+int etags_get_objects_for_file (etags_rank_t type, const char *tagfile,
+                            const char *start_path, const char *match_filename,
+                            etags_hash_t * functions_hash,
+                            int *max_len_return, int size_limit)
+{
+    /* *INDENT-OFF* */
+    enum
+    {
+        start,
+        in_filename,
+        in_define
+    } state = start;
+    /* *INDENT-ON* */
+
+    FILE *f;
+    char buf[BUF_LARGE];
+
+    int num = 0;                /* returned value */
+    char *filename = NULL;
+
+    if (!match_filename || !tagfile)
+        return 0;
+
+    *max_len_return = 0;
+
+    /* open file with positions */
+    f = fopen (tagfile, "r");
+    if (f == NULL)
+        return 0;
+
+    while (fgets (buf, sizeof (buf), f))
+    {
+        switch (state)
+        {
+        case start:
+            if (buf[0] == 0x0C)
+            {
+                state = in_filename;
+            }
+            break;
+        case in_filename:
+            {
+                size_t pos;
+
+                pos = strcspn (buf, ",");
+                g_free (filename);
+                filename = g_strndup (buf, pos);
+                state = in_define;
+                break;
+            }
+        case in_define:
+            if (buf[0] == 0x0C)
+            {
+                state = in_filename;
+                break;
+            }
+            /* check if the filename matches the requested one */
+            if (strcmp (filename, match_filename) == 0)
+            {
+                char *longname = NULL;
+                char *shortname = NULL;
+                long line = 0;
+
+                parse_define (buf, &longname, &shortname, &line);
+                if (num < size_limit - 1)
+                {
+                    gboolean can_be_func, can_be_var, can_be_type, is_other;
+
+                    /* Prepare the work variable. */
+                    char *longname_wr;
+                    longname_wr = g_strdup(longname);
+
+                    /* Function â€“ if there's '(' in the declaration. */
+                    can_be_func = strstr(longname,"(") != NULL;
+                    /* Variable â€“ if there's no parens and no # in the declaration. */
+                    can_be_var = strstr(g_strdelimit(longname_wr,"}{()#",''),"") == NULL;
+                    /* Type â€“ if there's a 'struct', 'typedef', 'enum' or '}' in the declaration. */
+                    can_be_type=(strstr(longname,"struct ") || 
+                                            strstr(longname,"typedef ") ||
+                                            strstr(longname,"enum ")) ||
+                                (strstr(longname, "}") &&
+                                    (g_str_has_suffix(shortname,"_t") || 
+                                        g_str_has_suffix(shortname,"_type")));
+                    /* Other kind â€“ nor any of the above. */
+                    is_other = !can_be_func && !can_be_var && !can_be_type;
+
+                    /* Renew the work variable. */
+                    g_free(longname_wr);
+                    longname_wr = g_strdup(longname);
+
+                    /* A closer examination of type tags. */
+                    if (type == TAG_RANK_TYPES && can_be_type && !can_be_func) {
+                        /*
+                         * Verify if it's not a struct variable or an enum.
+                         * It filters out occurrences such as:
+                         * â€“ struct type SHORTNAME â€¦ â€“ i.e.: the shortname at 3rd position, because
+                         *   this means that a struct variable, not a struct type is being defined.
+                         */
+                        gchar **words = g_strsplit(str_collapse_whitespace(longname_wr, ' ')," ", -1);
+                        if (words[2] && strcmp(words[2], shortname) == 0)
+                            can_be_type = FALSE;
+                        g_strfreev(words);
+                    }
+
+                    /* A closer examination of variable tags. */
+                    if (type == TAG_RANK_VARIABLES && can_be_var) {
+                        /* Verify if it's not a struct typedef or an enum. */
+                        gchar **words = g_strsplit(str_collapse_whitespace(longname_wr, ' ')," ", -1);
+                        if (strcmp(words[0], "typedef") == 0 || !words[0] || !words[1])
+                            can_be_var = FALSE;
+                        /* Most probably an enum ENUM = 0|1|â€¦ assignment. */
+                        if (!words[0] || strstr(words[0], "=") || (words[1] && words[1][0] == '='))
+                            can_be_var = FALSE;
+                        g_strfreev(words);
+                    }
+
+                    /* Free the work variable. */
+                    g_free(longname_wr);
+
+                    /* Is the object of the requested type? */
+                    if (type == TAG_RANK_ANY ||
+                        ((type == TAG_RANK_FUNCTIONS && can_be_func) ||
+                            (type == TAG_RANK_VARIABLES && can_be_var) ||
+                            (type == TAG_RANK_TYPES && can_be_type) ||
+                            (type == TAG_RANK_OTHER && is_other)))
+                    {
+                        /* Update the max. length return variable */
+                        int max_len_candidate;
+                        max_len_candidate = strlen(shortname);
+                        if (*max_len_return < max_len_candidate)
+                            *max_len_return = max_len_candidate;
+
+                        /* Save the filename. */
+                        functions_hash[num].filename = g_strdup (filename);
+                        functions_hash[num].filename_len = strlen (filename);
+
+                        /* Save and canonicalize the path to the file. */
+                        functions_hash[num].fullpath =
+                            mc_build_filename (start_path, filename, (char *) NULL);
+                        canonicalize_pathname (functions_hash[num].fullpath);
+
+                        /* Save the short define. */
+                        if (shortname)
+                            functions_hash[num].short_define = g_strdup (shortname);
+                        else
+                            functions_hash[num].short_define = g_strdup (longname);
+
+                        /* Save the line number. */
+                        functions_hash[num].line = line;
+
+                        /* Increase the count of the matched objects. */
+                        num++;
+                    }
+                }
+            }
+            break;
+        default:
+            break;
+        }
+    }
+
+    g_free (filename);
+    fclose (f);
+    return num;
+}
+
+/* --------------------------------------------------------------------------------------------- */
+
 int
 etags_set_definition_hash (const char *tagfile, const char *start_path,
                            const char *match_func, etags_hash_t * def_hash)
diff --git a/src/editor/etags.h b/src/editor/etags.h
index be71b3a27..a0eb77710 100644
--- a/src/editor/etags.h
+++ b/src/editor/etags.h
@@ -6,10 +6,10 @@
 
 /*** typedefs(not structures) and defined constants **********************************************/
 
-#define MAX_WIDTH_DEF_DIALOG 60 /* max width def dialog */
-#define MAX_DEFINITIONS 60      /* count found entries show */
-#define SHORT_DEF_LEN   30
-#define LONG_DEF_LEN    40
+#define MAX_WIDTH_DEF_DIALOG 60 /* max width of the dialog */
+#define MAX_TAG_OBJECTS   350
+#define SHORT_DEF_LEN   70
+#define LONG_DEF_LEN    70
 #define LINE_DEF_LEN    16
 
 /*** enums ***************************************************************************************/
@@ -25,6 +25,27 @@ typedef struct etags_hash_struct
     long line;
 } etags_hash_t;
 
+
+typedef enum
+{
+    TAG_JUMP_KIND_FUNCTION_LIST,   /* List of functions in current file. */
+    TAG_JUMP_KIND_TYPE_LIST,       /* List of type definitions in current file. */
+    TAG_JUMP_KIND_VAR_LIST,        /* List of variables in current file. */
+    TAG_JUMP_KIND_OTHER_LIST,      /* List of other tag object types for the current file. */
+    TAG_JUMP_KIND_ANY_LIST,        /* List of all tags for current file. */
+    TAG_JUMP_KIND_MATCH_WORD,      /* A list of tag objects matching left word. */
+    TAG_JUMP_KIND_QUICK_WHOLE_WORD /* Future â€“ instantly jump to the id under cursor, same file */
+} etags_jump_type_t;
+
+typedef enum
+{
+    TAG_RANK_FUNCTIONS,     /* Function definitions */
+    TAG_RANK_TYPES,         /* Types (structs, typedefs, etc.)  */
+    TAG_RANK_VARIABLES,     /* Variables */
+    TAG_RANK_OTHER,         /* Other kind (not of the above) */
+    TAG_RANK_ANY            /* All kinds */
+} etags_rank_t;
+
 /*** global variables defined in .c file *********************************************************/
 
 /*** declarations of public functions ************************************************************/
@@ -33,5 +54,12 @@ typedef struct etags_hash_struct
 int etags_set_definition_hash (const char *tagfile, const char *start_path,
                                const char *match_func, etags_hash_t * def_hash);
 
+int etags_get_objects_for_file (etags_rank_t type, const char *tagfile,
+                            const char *start_path, const char *match_filename,
+                            etags_hash_t * functions_hash,
+                            int *max_len_return, int size_limit);
+
+int etags_locate_tags_file(char **tagfile_return, char **path_return);
+
 /*** inline functions ****************************************************************************/
 #endif /* MC__EDIT_ETAGS_H */
diff --git a/src/keybind-defaults.c b/src/keybind-defaults.c
index c423e6be4..e16df0ea5 100644
--- a/src/keybind-defaults.c
+++ b/src/keybind-defaults.c
@@ -465,6 +465,11 @@ static const global_keymap_ini_t default_editor_keymap[] = {
     {"ShowNumbers", "alt-n"},
     {"ShowTabTws", "alt-underline"},
     {"SyntaxOnOff", "ctrl-s"},
+    {"SelectFunction","alt-shift-f"},
+    {"SelectVariable","alt-shift-v"},
+    {"SelectType","alt-shift-t"},
+    {"SelectOther","alt-shift-o"},
+    {"SelectAllKinds","alt-shift-a"},
     {"Find", "alt-enter"},
     {"FilePrev", "alt-minus"},
     {"FileNext", "alt-plus"},
-- 
2.28.0


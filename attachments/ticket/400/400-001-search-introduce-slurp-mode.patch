From 6e6f05b78ff8a4bdb45f7bf0679a778c6210c17f Mon Sep 17 00:00:00 2001
From: Mooffie <mooffie@gmail.com>
Date: Tue, 6 Dec 2016 22:26:33 +0200
Subject: [PATCH 1/3] Ticket #400: search: introduce slurp mode.

(The "get around sloppy callers" comment refers to an imperfection in the
editor's backwards-search in which the 1st iteration turns out to have
start_search==(end_search+1).)
---
 lib/search.h        | 14 ++++++++++++++
 lib/search/lib.c    |  3 +++
 lib/search/regex.c  |  5 +++--
 lib/search/search.c | 21 +++++++++++++++++++++
 src/setup.c         | 30 ++++++++++++++++++++++++++++++
 5 files changed, 71 insertions(+), 2 deletions(-)

diff --git a/lib/search.h b/lib/search.h
index 6e79609..d2a199f 100644
--- a/lib/search.h
+++ b/lib/search.h
@@ -37,6 +37,7 @@ typedef enum
     MC_SEARCH_E_REGEX,
     MC_SEARCH_E_REGEX_REPLACE,
     MC_SEARCH_E_NOTFOUND,
+    MC_SEARCH_E_SLURP_MODE_MAXED,
     MC_SEARCH_E_ABORT
 } mc_search_error_t;
 
@@ -81,6 +82,16 @@ typedef struct mc_search_struct
     /* search entire string (from begin to end). Used only with GLOB search type */
     gboolean is_entire_line;
 
+    /*
+     * Whether to accumulate the entire haystack (the data to search in)
+     * into one buffer before searching it. This makes it possible to
+     * search across lines.
+     *
+     * Normally the haystack is accumulated till a "\n" is encountered,
+     * repeatedly. This limits the scope of the search to one line only.
+     */
+    gboolean slurp_mode;
+
     /* function, used for getting data. NULL if not used */
     mc_search_fn search_fn;
 
@@ -133,6 +144,7 @@ typedef struct mc_search_type_str_struct
 /* Error messages */
 extern const char *STR_E_NOTFOUND;
 extern const char *STR_E_UNKNOWN_TYPE;
+extern const char *STR_E_SLURP_MODE_MAXED;
 extern const char *STR_E_RPL_NOT_EQ_TO_FOUND;
 extern const char *STR_E_RPL_INVALID_TOKEN;
 
@@ -167,6 +179,8 @@ gboolean mc_search (const gchar * pattern, const gchar * pattern_charset, const
 int mc_search_getstart_result_by_num (mc_search_t *, int);
 int mc_search_getend_result_by_num (mc_search_t *, int);
 
+void mc_search_set_slurp_mode_max (gsize max);
+
 /* *INDENT-OFF* */
 void mc_search_set_error (mc_search_t * lc_mc_search, mc_search_error_t code, const gchar * format, ...)
      G_GNUC_PRINTF (3, 4);
diff --git a/lib/search/lib.c b/lib/search/lib.c
index 5d086f1..8e6c362 100644
--- a/lib/search/lib.c
+++ b/lib/search/lib.c
@@ -46,6 +46,9 @@ const char *STR_E_UNKNOWN_TYPE = N_("Not implemented yet");
 const char *STR_E_RPL_NOT_EQ_TO_FOUND =
 N_("Num of replace tokens not equal to num of found tokens");
 const char *STR_E_RPL_INVALID_TOKEN = N_("Invalid token number %d");
+const char *STR_E_SLURP_MODE_MAXED = N_("Buffer is too large:\n"
+                                        "Searches across lines, or searches for 0x0A bytes,\n"
+                                        "are limited to buffers of size %d MB.");
 
 /*** file scope macro definitions ****************************************************************/
 
diff --git a/lib/search/regex.c b/lib/search/regex.c
index e8d896c..070d463 100644
--- a/lib/search/regex.c
+++ b/lib/search/regex.c
@@ -912,7 +912,8 @@ mc_search__run_regex (mc_search_t * lc_mc_search, const void *user_data,
 
                 g_string_append_c (lc_mc_search->regex_buffer, (char) current_chr);
 
-                if ((char) current_chr == '\n' || virtual_pos > end_search)
+                if (((char) current_chr == '\n' && !lc_mc_search->slurp_mode)
+                    || virtual_pos > end_search)
                     break;
             }
         }
@@ -931,7 +932,7 @@ mc_search__run_regex (mc_search_t * lc_mc_search, const void *user_data,
 
                 current_pos++;
 
-                if (current_chr == '\n' || current_pos > end_search)
+                if ((current_chr == '\n' && !lc_mc_search->slurp_mode) || current_pos > end_search)
                     break;
             }
 
diff --git a/lib/search/search.c b/lib/search/search.c
index 2e19ccf..f52dfc3 100644
--- a/lib/search/search.c
+++ b/lib/search/search.c
@@ -57,6 +57,9 @@ static const mc_search_type_str_t mc_search__list_types[] = {
     {NULL, MC_SEARCH_T_INVALID}
 };
 
+/* The maximal buffer size to allocate for slurp mode. */
+static gsize slurp_mode_max = 0;
+
 /*** file scope functions ************************************************************************/
 
 static mc_search_cond_t *
@@ -263,6 +266,14 @@ mc_search_prepare (mc_search_t * lc_mc_search)
 
 /* --------------------------------------------------------------------------------------------- */
 
+void
+mc_search_set_slurp_mode_max (gsize max)
+{
+    slurp_mode_max = max;
+}
+
+/* --------------------------------------------------------------------------------------------- */
+
 /**
  * Carries out the search.
  *
@@ -302,6 +313,16 @@ mc_search_run (mc_search_t * lc_mc_search, const void *user_data,
     if ((lc_mc_search->conditions == NULL) && !mc_search_prepare (lc_mc_search))
         return FALSE;
 
+    /* This has to come after mc_search_prepare(), as mc_search__cond_struct_new_init_XXX()
+     * may elect to turn slurp_mode on or off. */
+    if (lc_mc_search->slurp_mode && end_search > start_search   /* get around sloppy callers */
+        && end_search - start_search > slurp_mode_max)
+    {
+        mc_search_set_error (lc_mc_search, MC_SEARCH_E_SLURP_MODE_MAXED, _(STR_E_SLURP_MODE_MAXED),
+                             (int) (slurp_mode_max / 1024 / 1024));
+        return FALSE;
+    }
+
     switch (lc_mc_search->search_type)
     {
     case MC_SEARCH_T_NORMAL:
diff --git a/src/setup.c b/src/setup.c
index 951edb8..1861d9b 100644
--- a/src/setup.c
+++ b/src/setup.c
@@ -37,6 +37,7 @@
 #include "lib/tty/tty.h"
 #include "lib/tty/key.h"
 #include "lib/mcconfig.h"
+#include "lib/search.h"         /* mc_search_set_slurp_mode_max() */
 #include "lib/fileloc.h"
 #include "lib/timefmt.h"
 #include "lib/util.h"
@@ -951,6 +952,33 @@ save_panel_types (void)
 }
 
 /* --------------------------------------------------------------------------------------------- */
+
+/**
+ * Returns the user's preference for the largest buffer for some text
+ * operations.
+ *
+ * Code copied from the editor's edit.c:check_file_access().
+ *
+ * @todo: make the editor use this function.
+ */
+static uintmax_t
+get_filesize_memory_threshold (void)
+{
+    static uintmax_t threshold = UINTMAX_MAX;
+
+    if (threshold == UINTMAX_MAX)
+    {
+        gboolean err = FALSE;
+
+        threshold = parse_integer (option_filesize_threshold, &err);
+        if (err)
+            threshold = 64 * 1024 * 1024;       /* @todo: move edit.c's constant here. */
+    }
+
+    return threshold;
+}
+
+/* --------------------------------------------------------------------------------------------- */
 /*** public functions ****************************************************************************/
 /* --------------------------------------------------------------------------------------------- */
 
@@ -1146,6 +1174,8 @@ load_setup (void)
         mc_config_get_string (mc_global.main_config, CONFIG_MISC_SECTION, "clipboard_store", "");
     clipboard_paste_path =
         mc_config_get_string (mc_global.main_config, CONFIG_MISC_SECTION, "clipboard_paste", "");
+
+    mc_search_set_slurp_mode_max ((gsize) get_filesize_memory_threshold ());
 }
 
 /* --------------------------------------------------------------------------------------------- */
-- 
2.9.3


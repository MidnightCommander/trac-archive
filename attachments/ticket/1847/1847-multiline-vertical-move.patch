From e62ff17b07c57d07798ccd82dbe3a1dbbe9f2e7d Mon Sep 17 00:00:00 2001
From: Vit Rosin <vit_r@list.ru>
Date: Fri, 27 Nov 2009 14:56:59 +0000
Subject: [PATCH] multiline vertical move

---
 edit/edit-impl.h       |    8 ++
 edit/edit.c            |  207 +++++++++++++++++++++++++++++++++++++++++++++++-
 misc/mc.keymap.default |    1 +
 misc/mc.keymap.emacs   |    1 +
 src/cmddef.h           |    1 +
 src/keybind.c          |    2 +
 6 files changed, 218 insertions(+), 2 deletions(-)

diff --git a/edit/edit-impl.h b/edit/edit-impl.h
index 6efb373..f0359f4 100644
--- a/edit/edit-impl.h
+++ b/edit/edit-impl.h
@@ -277,6 +277,14 @@ void edit_syntax_dialog (void);
 void edit_mail_dialog (WEdit *edit);
 void format_paragraph (WEdit *edit, int force);
 
+/* mlvm - multiline vertical move */
+void mlvm_get_block_marks (WEdit * edit, long *start_mark, long *end_mark);
+int mlvm_proceed_unmarked_line (WEdit * edit, const int command);
+int mlvm_move_marked_block_up (WEdit * edit, const long start_mark, const long end_mark);
+int mlvm_move_marked_block_down (WEdit * edit, const long start_mark, const long end_mark);
+int mlvm_block_up_move (WEdit * edit, const int command);
+int mlvm_block_down_move (WEdit * edit, const int command);
+
 /* either command or char_for_insertion must be passed as -1 */
 void edit_execute_cmd (WEdit *edit, int command, int char_for_insertion);
 
diff --git a/edit/edit.c b/edit/edit.c
index 0b0b1eb..dea0ba0 100644
--- a/edit/edit.c
+++ b/edit/edit.c
@@ -121,6 +121,9 @@ const char VERTICAL_MAGIC[] = {'\1', '\1', '\1', '\1', '\n'};
 const global_keymap_t *editor_map;
 const global_keymap_t *editor_x_map;
 
+static long marked_topline;           /* upper highlighted line */
+static long marked_lowline;           /* lower highlighted line */
+
 static void user_menu (WEdit *edit);
 
 int edit_get_byte (WEdit * edit, long byte_index)
@@ -2553,6 +2556,12 @@ edit_execute_key_command (WEdit *edit, unsigned long command, int char_for_inser
     if (command != CK_Undo && command != CK_Ext_Mode)
 	edit_push_key_press (edit);
 
+    if (marked_topline >= 0 || marked_lowline >= 0) {
+        if (! (command == CK_Move_Up || command == CK_Move) ) {
+            marked_topline = -1;
+            marked_lowline = -1;
+        }
+    }
     edit_execute_cmd (edit, command, char_for_insertion);
     if (column_highlighting)
 	edit->force |= REDRAW_PAGE;
@@ -2586,7 +2595,7 @@ edit_execute_cmd (WEdit *edit, int command, int char_for_insertion)
 	edit->highlight = 1;
     } else {			/* any other command */
 	if (edit->highlight)
-	    edit_mark_cmd (edit, 0);	/* clear */
+	    edit_mark_cmd (edit, 0);	/* marking on */
 	edit->highlight = 0;
     }
 
@@ -2997,12 +3006,20 @@ edit_execute_cmd (WEdit *edit, int command, int char_for_insertion)
     case CK_Remove:
 	edit_block_delete_cmd (edit);
 	break;
+    case CK_Move_Up:
+        if (mlvm_block_up_move (edit, command))
+            break;
+        if ( option_cursor_beyond_eol && edit->over_col > 0 )
+            edit_insert_over (edit);
+        edit_block_move_cmd (edit);
+        break;
     case CK_Move:
+        if (mlvm_block_down_move (edit, command))
+            break;
         if ( option_cursor_beyond_eol && edit->over_col > 0 )
             edit_insert_over (edit);
 	edit_block_move_cmd (edit);
 	break;
-
     case CK_Shift_Block_Left:
         if (edit->mark1 != edit->mark2)
             edit_move_block_to_left (edit);
@@ -3341,3 +3358,189 @@ edit_stack_free (void)
 	    edit_stack_iterator++)
 	g_free (edit_history_moveto[edit_stack_iterator].filename);
 }
+
+void mlvm_get_block_marks (WEdit * edit, long *start_mark, long *end_mark)
+{
+    edit_cursor_move (edit, (*end_mark - 1) - edit->curs1);
+    edit_cursor_to_eol (edit);
+    *end_mark = edit->curs1 + 1;
+    marked_lowline = edit->curs_line;
+    edit_cursor_move (edit, *start_mark - edit->curs1);
+    marked_topline = edit->curs_line;
+    edit_cursor_to_bol (edit);
+    *start_mark = edit->curs1;
+}
+
+int mlvm_proceed_unmarked_line (WEdit * edit, const int command) /* F6  |  C-F6 */
+{
+    long start_mark, end_mark;
+
+    if (edit->total_lines < 2)
+        return 0;
+
+    edit_cursor_to_bol (edit);
+
+    if (edit->curs1 < edit->last_byte) {
+        start_mark = edit->curs1;
+        edit_cursor_move (edit, 1);
+        end_mark = edit->curs1;
+    } else {
+        end_mark = edit->curs1;
+        edit_cursor_move (edit, -1);
+        start_mark = edit->curs1;
+    }
+
+    mlvm_get_block_marks (edit, &start_mark, &end_mark);
+
+    if (command == CK_Move) {
+        if (mlvm_move_marked_block_down (edit, start_mark, end_mark))
+            return 1;
+        else
+            marked_lowline = -1;
+
+    } else if (command == CK_Move_Up) {
+        if (mlvm_move_marked_block_up (edit, start_mark, end_mark))
+            return 1;
+        else
+            marked_topline = -1;
+    }
+
+    return 0;
+}
+
+int mlvm_move_marked_block_up (WEdit * edit, const long start_mark, const long end_mark)
+{
+    long p, upline_min, upline_max;
+
+    if (edit->total_lines < 2)
+        return 0;
+
+    if (marked_topline < 1)
+        return 0;
+
+    edit_cursor_move (edit, start_mark - edit->curs1);
+
+    if (!edit->curs_line)
+        return 0;
+
+    upline_max = start_mark - 1;
+    edit_cursor_to_bol (edit);
+    edit_move_up (edit, 1, 0);
+    marked_topline = edit->curs_line;
+    upline_min = edit->curs1;
+    edit_cursor_move (edit, (end_mark - 1) - edit->curs1);
+
+    for (p = (upline_min - 1); p < (start_mark - 1); p++)
+        edit_insert (edit, edit_get_byte (edit, p));
+
+    edit_cursor_move (edit, upline_min - upline_max);
+    marked_lowline = edit->curs_line - 1;
+    edit_mark_cmd (edit, 1);	/* clear */
+    edit_mark_cmd (edit, 0);	/* mark1 */
+    edit_cursor_move (edit, upline_min - edit->curs1);
+    edit_delete_line (edit);
+    edit_mark_cmd (edit, 0);	/* mark2 */
+    edit_move_to_line (edit, marked_topline);
+    edit_cursor_to_bol (edit);
+
+    if (edit->curs_line < (edit->start_line + 2))
+        edit_move_display (edit, edit->curs_line - 2);
+
+    return 1;
+}
+
+int mlvm_block_up_move (WEdit * edit, const int command)
+{
+    long start_mark, end_mark;
+
+    if (column_highlighting)
+        return 0;
+
+    marked_lowline = -1;
+
+    if (eval_marks (edit, &start_mark, &end_mark)) {
+        if (mlvm_proceed_unmarked_line (edit, command))
+            return 1;
+    } else if (start_mark <= edit->curs1 && edit->curs1 <= end_mark) {
+        if (marked_topline < 0)
+            mlvm_get_block_marks (edit, &start_mark, &end_mark);
+
+        if (mlvm_move_marked_block_up (edit, start_mark, end_mark))
+            return 1;
+    } else {
+        marked_topline = -1;
+    }
+
+    return 0;
+}
+
+int mlvm_move_marked_block_down (WEdit * edit, const long start_mark, const long end_mark)
+{
+    long p, n, lowline_min, lowline_max;
+
+    if (edit->total_lines < 2)
+        return 0;
+
+    if (marked_lowline < 0)
+        return 0;
+
+    if (end_mark >= (edit->last_byte - 1)) {
+        marked_lowline = -1;
+        return 0;
+    }
+    edit_mark_cmd (edit, 1);	/* clear */
+    edit_cursor_move (edit, end_mark - edit->curs1);
+    lowline_min = edit->curs1;
+    edit_cursor_to_eol (edit);
+    lowline_max = edit->curs1 + 1;
+    edit_cursor_move (edit, start_mark - edit->curs1);
+
+    for (n = -1, p = lowline_min; p < lowline_max; p++)
+        edit_insert (edit, edit_get_byte (edit, ++n + p));
+
+    edit_mark_cmd (edit, 0);	/* mark1 */
+    marked_topline = edit->curs_line;
+    edit_cursor_move (edit, (end_mark - start_mark));
+    edit_cursor_to_eol (edit);
+
+    while (edit_get_byte (edit, edit->curs1 - 1) != '\n')
+        edit_backspace (edit, 1);
+
+    edit_backspace (edit, 1);
+    marked_lowline = edit->curs_line;
+    edit_cursor_move (edit, 1);
+    edit_mark_cmd (edit, 0);	/* mark2 */
+    edit_move_to_line (edit, marked_lowline);
+    edit_cursor_to_bol (edit);
+
+    if (edit->curs_line > (edit->start_line
+            + edit->num_widget_lines - 3))
+        edit_move_display (edit, edit->curs_line - edit->num_widget_lines + 3);
+
+    return 1;
+}
+
+int mlvm_block_down_move (WEdit * edit, const int command)
+{
+    long start_mark, end_mark;
+
+    if (column_highlighting)
+        return 0;
+
+    marked_topline = -1;
+
+    if (eval_marks (edit, &start_mark, &end_mark)) {
+        if (mlvm_proceed_unmarked_line (edit, command))
+            return 1;
+    } else if (start_mark <= edit->curs1 && edit->curs1 <= end_mark) {
+        if (marked_lowline < 0)
+            mlvm_get_block_marks (edit, &start_mark, &end_mark);
+
+        if (mlvm_move_marked_block_down (edit, start_mark, end_mark))
+            return 1;
+    } else {
+        marked_lowline = -1;
+    }
+
+    return 0;
+}
diff --git a/misc/mc.keymap.default b/misc/mc.keymap.default
index 5883787..467cd77 100644
--- a/misc/mc.keymap.default
+++ b/misc/mc.keymap.default
@@ -40,6 +40,7 @@ EditSaveas = f12
 EditMark = f3
 EditCopy = f5
 EditMove = f6
+EditMoveUp = ctrl-f6
 EditRemove = f8
 EditUnmark =
 EditFind = f7
diff --git a/misc/mc.keymap.emacs b/misc/mc.keymap.emacs
index b30d85f..8face7a 100644
--- a/misc/mc.keymap.emacs
+++ b/misc/mc.keymap.emacs
@@ -39,6 +39,7 @@ EditSaveas = f12
 EditMark = f3
 EditCopy = f5
 EditMove = f6
+EditMoveUp = ctrl-f6
 EditRemove = f8
 EditUnmark =
 EditFind = f7
diff --git a/src/cmddef.h b/src/cmddef.h
index 594223e..3550078 100644
--- a/src/cmddef.h
+++ b/src/cmddef.h
@@ -63,6 +63,7 @@
 #define CK_Column_Mark		208
 #define CK_Shift_Block_Left	211
 #define CK_Shift_Block_Right	212
+#define CK_Move_Up              213
 
 /* search and replace */
 #define CK_Find			301
diff --git a/src/keybind.c b/src/keybind.c
index 66657ab..c15eac8 100644
--- a/src/keybind.c
+++ b/src/keybind.c
@@ -83,6 +83,7 @@ static name_keymap_t command_names[] = {
     { "EditMark",                          CK_Mark },
     { "EditCopy",                          CK_Copy },
     { "EditMove",                          CK_Move },
+    { "EditMoveUp",                        CK_Move_Up},
     { "EditRemove",                        CK_Remove },
     { "EditUnmark",                        CK_Unmark },
     { "EditSaveBlock",                     CK_Save_Block },
@@ -603,6 +604,7 @@ const global_keymap_t default_editor_keymap[] = {
     /* Ctrl */
     { KEY_M_CTRL | (KEY_F (2)),             CK_Save_As,                     "C-F2" },
     { KEY_M_CTRL | (KEY_F (4)),             CK_Replace_Again,               "C-F4" },
+    { KEY_M_CTRL | (KEY_F (6)),             CK_Move_Up,                     "C-F6" },
     { KEY_M_CTRL | (KEY_F (7)),             CK_Find_Again,                  "C-F7" },
     { KEY_M_CTRL | KEY_BACKSPACE,           CK_Undo,                        "C-BackSpace" },
     { KEY_M_CTRL | KEY_NPAGE,               CK_End_Of_Text,                 "C-PgDn" },
-- 
1.6.4


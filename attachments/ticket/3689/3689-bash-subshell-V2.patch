--- a/src/subshell/common.c
+++ b/src/subshell/common.c
@@ -355,7 +355,7 @@
     switch (mc_global.shell->type)
     {
     case SHELL_BASH:
-        execl (mc_global.shell->path, "bash", "-rcfile", init_file, (char *) NULL);
+        execl (mc_global.shell->path, mc_global.shell->name, "-rcfile", init_file, (char *) NULL);
         break;
 
     case SHELL_ZSH:
--- a/lib/shell.c
+++ b/lib/shell.c
@@ -33,6 +33,8 @@
 #include <stdarg.h>
 #include <stdio.h>
 #include <stdlib.h>
+#include <sys/wait.h>
+#include <unistd.h>
 
 #include "global.h"
 #include "util.h"
@@ -191,16 +193,57 @@
         mc_shell->type = SHELL_NONE;
 }
 
+/* ---------------------------------------------------------------------------------------------
+   This function returns TRUE for a shell in two cases:
+   1) the shell has an internal variable with respective name
+   2) environmental variable with respective name is set
+   --------------------------------------------------------------------------------------------- */
+static gboolean
+mc_shell_internal_variable_set (mc_shell_t * mc_shell, const char * name)
+{
+    pid_t cpid, w;
+    int status;
+    char *command;
+
+    command = g_strdup_printf ("([ -z \"${%s+x}\" ] && exit 1) || exit 0", name);
+
+    cpid = fork();
+    if (cpid == -1) {
+        /* failed to fork */
+        g_free (command);
+        return FALSE;
+    }
+
+   if (cpid == 0) {            /* Code executed by child */
+        execl(mc_shell->path, mc_shell->path, "-c", command, (char *) NULL);
+        /* execl failed */
+        exit(1);
+   } else {                    /* Code executed by parent */
+        g_free (command);
+        do {
+            w = waitpid(cpid, &status, WUNTRACED | WCONTINUED);
+            if (w == -1) {
+                /* witpid error */
+                return FALSE;
+            }
+        } while (!WIFEXITED(status) && !WIFSIGNALED(status));
+
+        return (WIFEXITED(status)) && (WEXITSTATUS(status) == 0);
+    }
+}
+
 /* --------------------------------------------------------------------------------------------- */
 
+
 static void
 mc_shell_recognize_path (mc_shell_t * mc_shell)
 {
-    /* If shell is not symlinked to busybox, it is safe to assume it is a real shell */
-    if (strstr (mc_shell->path, "/bash") != NULL || getenv ("BASH") != NULL)
+    /* If shell is not symlinked to busybox, it is safe to assume it is a real shell
+       Let's assume shell is bash if BASH variable is set */
+    if (mc_shell_internal_variable_set (mc_shell, "BASH"))
     {
         mc_shell->type = SHELL_BASH;
-        mc_shell->name = "bash";
+        mc_shell->name = mc_shell->path;
     }
     else if (strstr (mc_shell->path, "/sh") != NULL || getenv ("SH") != NULL)
     {

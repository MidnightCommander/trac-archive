--- mc.git/src/boxes.c	2009-09-04 01:42:08.000000000 +0200
+++ mc.src/src/boxes.c	2009-09-05 22:36:44.000000000 +0200
@@ -68,7 +68,6 @@
 #include "../vfs/gc.h"
 #endif
 
-static int DISPLAY_X = 45, DISPLAY_Y = 14;
 
 static Dlg_head *dd;
 static WRadio *my_radio;
@@ -142,21 +141,25 @@
 display_init (int radio_sel, char *init_text, int _check_status,
 	      char **_status)
 {
-    static const char *display_title = N_("Listing mode");
+    static int DISPLAY_X = 48, DISPLAY_Y = 15;
+
     static gboolean i18n_displays_flag = FALSE;
+    const char *display_title = _("Listing mode");
     const char *user_mini_status = _("user &Mini status");
     const char *ok_button = _("&OK");
     const char *cancel_button = _("&Cancel");
 
-    static int button_start = 30;
+    static int ok_start, cancel_start;
 
     displays_status = _status;
 
     if (!i18n_displays_flag) {
-	int i, l, maxlen = 0;
+	int i, maxlen;
+	int ok_size = 6, cancel_size = 4;	/* Button extras. */
+	int button_gap;
 	const char *cp;
 
-	display_title = _(display_title);
+	maxlen = 0;
 	for (i = 0; i < LIST_TYPES; i++) {
 #ifdef ENABLE_NLS
 	    displays[i] = _(displays[i]);
@@ -164,11 +167,23 @@
 	    maxlen = max (maxlen, str_term_width1 (displays[i]));
 	}
 
-	l = max (str_term_width1 (ok_button) + 5, str_term_width1 (cancel_button) + 3);
-	DISPLAY_X = max (DISPLAY_X, maxlen + l + 16);
-	DISPLAY_X = max (DISPLAY_X, str_term_width1 (user_mini_status) + 13);
-	DISPLAY_X = max (DISPLAY_X, str_term_width1 (display_title) + 10);
-	button_start = DISPLAY_X - l - 5;
+	maxlen += 11;
+	DISPLAY_X = max (maxlen, DISPLAY_X);
+
+	maxlen = str_term_width1 (user_mini_status) + 11;
+	DISPLAY_X = max (maxlen, DISPLAY_X);
+
+	maxlen = str_term_width1 (display_title) + 10;
+	DISPLAY_X = max (maxlen, DISPLAY_X);
+
+	ok_size += str_term_width1 (ok_button);
+	cancel_size += str_term_width1 (cancel_button);
+	maxlen = ok_size + cancel_size + 6 ;
+	DISPLAY_X = max (maxlen, DISPLAY_X);
+
+	button_gap = ( DISPLAY_X - 10 - ok_size - cancel_size ) / 3;
+	ok_start = button_gap + 5;
+	cancel_start = DISPLAY_X - button_gap - cancel_size - 4;
 
 	/* get hotkey of user-defined format string */
 	cp = strchr (displays[USER_TYPE], '&');
@@ -183,30 +198,30 @@
 		     DLG_CENTER | DLG_REVERSE);
 
     add_widget (dd,
-		button_new (4, button_start, B_CANCEL, NORMAL_BUTTON,
+		button_new (DISPLAY_Y - 3, cancel_start, B_CANCEL, NORMAL_BUTTON,
 			    cancel_button, 0));
 
     add_widget (dd,
-		button_new (3, button_start, B_ENTER, DEFPUSH_BUTTON,
+		button_new (DISPLAY_Y - 3, ok_start, B_ENTER, DEFPUSH_BUTTON,
 			    ok_button, 0));
 
     status =
-	input_new (10, 9, INPUT_COLOR, DISPLAY_X - 14, _status[radio_sel],
+	input_new (10, 8, INPUT_COLOR, DISPLAY_X - 12, _status[radio_sel],
 		   "mini-input", INPUT_COMPLETE_DEFAULT);
     add_widget (dd, status);
     input_set_point (status, 0);
 
     check_status =
-	check_new (9, 5, _check_status, user_mini_status);
+	check_new (9, 4, _check_status, user_mini_status);
     add_widget (dd, check_status);
 
     user =
-	input_new (7, 9, INPUT_COLOR, DISPLAY_X - 14, init_text,
+	input_new (7, 8, INPUT_COLOR, DISPLAY_X - 12, init_text,
 		   "user-fmt-input", INPUT_COMPLETE_DEFAULT);
     add_widget (dd, user);
     input_set_point (user, 0);
 
-    my_radio = radio_new (3, 5, LIST_TYPES, displays);
+    my_radio = radio_new (3, 4, LIST_TYPES, displays);
     my_radio->sel = my_radio->pos = current_mode;
     add_widget (dd, my_radio);
 }
